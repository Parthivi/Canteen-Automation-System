/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csmt;

//import com.sun.glass.events.KeyEvent;
import static csmt.LoginMain.conn;
import static csmt.LoginMain.ps;
import static csmt.LoginMain.rs;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.print.PrinterException;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.text.MessageFormat;
import java.time.LocalDate;
import java.time.Period;
//import java.time.LocalDate;
//import java.time.Period;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import static javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN;
import static javax.swing.JTable.AUTO_RESIZE_OFF;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/*@author Shubham
 */
public class MainMenu extends javax.swing.JFrame implements ActionListener {

    private static final String RUPEE = "\u20B9";
    String set1 = "";
    String set2 = "";
    static MainMenu sf = null;
    Timer tm2;
    public String session = "";
    private int quant;

    public MainMenu() {
        tm2 = new Timer(0, this);
        tm2.start();

        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
        contactLabel.setText("<html><b><font size=4.3>Canteen Management System</font></b>"
                + "<br><br><font size=3.5>Under the guidance of: Ms. Shivani Garg<br><br>!</font><br>"
                + "<br>Developers:<br>Loveleen Singh & Parthivi Khattar");

        setBT();
        setExc();
    }

    /*This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.   */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pop = new javax.swing.JDialog();
        updatePopup = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        popProdName = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        popProdQty = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        popProdRate = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        popProdProfit = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        updateBtn1 = new javax.swing.JButton();
        addBackBtn1 = new javax.swing.JButton();
        popEntDate = new com.toedter.calendar.JDateChooser();
        popExpDate = new com.toedter.calendar.JDateChooser();
        jLabel20 = new javax.swing.JLabel();
        popProdCode = new javax.swing.JTextField();
        inMonthCB2 = new javax.swing.JCheckBox();
        inMonthTF2 = new javax.swing.JTextField();
        mainMenu = new javax.swing.JPanel();
        menuPanel = new javax.swing.JPanel();
        addItemBtn = new javax.swing.JButton();
        billingBtn = new javax.swing.JButton();
        saleRecordBtn = new javax.swing.JButton();
        stockStatusBtn = new javax.swing.JButton();
        billCancelBtn = new javax.swing.JButton();
        grossProfitBtn = new javax.swing.JButton();
        exitApplicationBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        dateNTime = new javax.swing.JLabel();
        mainMenuGUI = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        contactLabel = new javax.swing.JLabel();
        addItem = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pNameTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        pQtyTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pRateTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        pProTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();
        addBackBtn = new javax.swing.JButton();
        pEntDateTxt = new com.toedter.calendar.JDateChooser();
        pExpDateTxt = new com.toedter.calendar.JDateChooser();
        inMonthCB1 = new javax.swing.JCheckBox();
        inMonthTF = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        dateNTime1 = new javax.swing.JLabel();
        closeBtn1 = new javax.swing.JButton();
        billing = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        billPCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        billPName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        billQty = new javax.swing.JTextField();
        billBackBtn = new javax.swing.JButton();
        addBillBtn = new javax.swing.JButton();
        dateNTime2 = new javax.swing.JLabel();
        closeBtn2 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inStockTab = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        billPrintPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        billGross = new javax.swing.JLabel();
        billNo = new javax.swing.JLabel();
        billDateTime = new javax.swing.JLabel();
        printBtn = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        cname = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        cunit = new javax.swing.JTextField();
        salesRecord = new javax.swing.JPanel();
        dateNTime3 = new javax.swing.JLabel();
        closeBtn3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        saleSessionApplyBtn = new javax.swing.JButton();
        saleRecordPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        sessionSaleTab = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        salePAmt = new javax.swing.JLabel();
        saleSAmt = new javax.swing.JLabel();
        stockStatus = new javax.swing.JPanel();
        dateNTime4 = new javax.swing.JLabel();
        closeBtn4 = new javax.swing.JButton();
        stockStatPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        stockStatTab = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        stockPCode = new javax.swing.JTextField();
        stockPName = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        monthCB = new javax.swing.JComboBox();
        jLabel29 = new javax.swing.JLabel();
        yearCB = new javax.swing.JComboBox();
        stockRecordApplyBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        billCancel = new javax.swing.JPanel();
        dateNTime5 = new javax.swing.JLabel();
        closeBtn5 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        billNoContentTab = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        billNTxt = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        billNameTxt = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        billQtyTxt = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        billAmtTxt = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        billDTxt = new javax.swing.JLabel();
        returnBillBtn = new javax.swing.JButton();
        returnEntireCB = new javax.swing.JCheckBox();
        jLabel37 = new javax.swing.JLabel();
        billGTxt = new javax.swing.JLabel();
        billCodeTxt = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        billNoTxt = new javax.swing.JTextField();
        billSOK = new javax.swing.JButton();
        billBack = new javax.swing.JButton();
        todaySale = new javax.swing.JPanel();
        dateNTime6 = new javax.swing.JLabel();
        closeBtn6 = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        daySaleTab = new javax.swing.JTable();
        jPanel18 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        tSaleCost = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        tProfit = new javax.swing.JTextField();
        noOfItem = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        tSaleAmt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        pop.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        pop.setAlwaysOnTop(true);
        pop.setMinimumSize(new java.awt.Dimension(700, 280));
        pop.setUndecorated(true);
        pop.setResizable(false);
        pop.getContentPane().setLayout(new java.awt.CardLayout());

        updatePopup.setBackground(new java.awt.Color(51, 255, 255));
        updatePopup.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updatePopup.setMaximumSize(new java.awt.Dimension(2000, 2000));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2), "Update Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel14.setText("Product Name:");

        popProdName.setNextFocusableComponent(pQtyTxt);
        popProdName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popProdNameActionPerformed(evt);
            }
        });

        jLabel15.setText("Quantity:");
        jLabel15.setOpaque(true);

        popProdQty.setNextFocusableComponent(pRateTxt);
        popProdQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                popProdQtyKeyTyped(evt);
            }
        });

        jLabel16.setText("Purchase Rate:");

        popProdRate.setNextFocusableComponent(pProTxt);
        popProdRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                popProdRateKeyTyped(evt);
            }
        });

        jLabel17.setText("Profit Percent:");

        popProdProfit.setNextFocusableComponent(pEntDateTxt);
        popProdProfit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                popProdProfitKeyTyped(evt);
            }
        });

        jLabel18.setText("Entry Date:");

        jLabel19.setText("Expiry Date:");

        updateBtn1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        updateBtn1.setText("UPDATE");
        updateBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtn1ActionPerformed(evt);
            }
        });

        addBackBtn1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        addBackBtn1.setText("BACK");
        addBackBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBackBtn1ActionPerformed(evt);
            }
        });

        popEntDate.setToolTipText("Entry Date");
        popEntDate.setDateFormatString("dd-MMM-yyyy");
        popEntDate.setNextFocusableComponent(pExpDateTxt);

        popExpDate.setToolTipText("Entry Date");
        popExpDate.setDateFormatString("dd-MMM-yyyy");

        jLabel20.setText("Product Code:");

        popProdCode.setEditable(false);

        inMonthCB2.setText("In Months");
        inMonthCB2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inMonthCB2ActionPerformed(evt);
            }
        });

        inMonthTF2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inMonthTF2KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(popProdName, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(popProdQty)
                    .addComponent(popProdRate)
                    .addComponent(popProdCode)
                    .addComponent(addBackBtn1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(inMonthCB2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(inMonthTF2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(popProdProfit)
                            .addComponent(popExpDate, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                            .addComponent(popEntDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(41, 41, 41))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(popProdCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popProdName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(popProdProfit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(15, 15, 15)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(popProdQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel18))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(popProdRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addBackBtn1)
                            .addComponent(updateBtn1)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(popEntDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(popExpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inMonthCB2)
                            .addComponent(inMonthTF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout updatePopupLayout = new javax.swing.GroupLayout(updatePopup);
        updatePopup.setLayout(updatePopupLayout);
        updatePopupLayout.setHorizontalGroup(
            updatePopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
            .addGroup(updatePopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updatePopupLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        updatePopupLayout.setVerticalGroup(
            updatePopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 261, Short.MAX_VALUE)
            .addGroup(updatePopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updatePopupLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pop.getContentPane().add(updatePopup, "card2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(900, 900));
        setUndecorated(true);
        getContentPane().setLayout(new java.awt.CardLayout());

        mainMenu.setBackground(new java.awt.Color(0, 204, 204));
        mainMenu.setMaximumSize(new java.awt.Dimension(900, 900));
        mainMenu.setPreferredSize(new java.awt.Dimension(803, 372));

        menuPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        menuPanel.setMaximumSize(new java.awt.Dimension(900, 900));

        addItemBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addItemBtn.setText("ADD ITEM");
        addItemBtn.setNextFocusableComponent(billingBtn);
        addItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemBtnActionPerformed(evt);
            }
        });
        addItemBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                addItemBtnKeyReleased(evt);
            }
        });

        billingBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        billingBtn.setText("BILLING");
        billingBtn.setNextFocusableComponent(saleRecordBtn);
        billingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billingBtnActionPerformed(evt);
            }
        });
        billingBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billingBtnKeyReleased(evt);
            }
        });

        saleRecordBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        saleRecordBtn.setText("SALES RECORDS");
        saleRecordBtn.setNextFocusableComponent(stockStatusBtn);
        saleRecordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleRecordBtnActionPerformed(evt);
            }
        });
        saleRecordBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                saleRecordBtnKeyReleased(evt);
            }
        });

        stockStatusBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        stockStatusBtn.setText("STOCKS STATUS");
        stockStatusBtn.setNextFocusableComponent(billCancelBtn);
        stockStatusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockStatusBtnActionPerformed(evt);
            }
        });
        stockStatusBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                stockStatusBtnKeyReleased(evt);
            }
        });

        billCancelBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        billCancelBtn.setText("BILL CANCELATION");
        billCancelBtn.setNextFocusableComponent(grossProfitBtn);
        billCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billCancelBtnActionPerformed(evt);
            }
        });
        billCancelBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billCancelBtnKeyReleased(evt);
            }
        });

        grossProfitBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        grossProfitBtn.setText("TODAYS SALE");
        grossProfitBtn.setNextFocusableComponent(exitApplicationBtn);
        grossProfitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grossProfitBtnActionPerformed(evt);
            }
        });
        grossProfitBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                grossProfitBtnKeyReleased(evt);
            }
        });

        exitApplicationBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        exitApplicationBtn.setText("EXIT");
        exitApplicationBtn.setNextFocusableComponent(addItemBtn);
        exitApplicationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitApplicationBtnActionPerformed(evt);
            }
        });
        exitApplicationBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                exitApplicationBtnKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(billingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saleRecordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockStatusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(billCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grossProfitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitApplicationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(addItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(billingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(saleRecordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(stockStatusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(billCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(grossProfitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(exitApplicationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        closeBtn.setBackground(new java.awt.Color(255, 102, 102));
        closeBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        closeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        closeBtn.setEnabled(false);
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        dateNTime.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dateNTime.setText("Date and Time");

        mainMenuGUI.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mainMenuGUI.setMaximumSize(new java.awt.Dimension(900, 900));
        mainMenuGUI.setMinimumSize(new java.awt.Dimension(100, 100));
        mainMenuGUI.setPreferredSize(new java.awt.Dimension(803, 372));
        mainMenuGUI.setLayout(new java.awt.CardLayout());

        jPanel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel9.setMaximumSize(new java.awt.Dimension(900, 900));
        jPanel9.setPreferredSize(new java.awt.Dimension(803, 372));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/CLG LOGO.png"))); // NOI18N
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });

        contactLabel.setText("jLabel19");
        contactLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(contactLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel13))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(contactLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainMenuLayout = new javax.swing.GroupLayout(mainMenu);
        mainMenu.setLayout(mainMenuLayout);
        mainMenuLayout.setHorizontalGroup(
            mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainMenuLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dateNTime, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(closeBtn))
                    .addGroup(mainMenuLayout.createSequentialGroup()
                        .addComponent(mainMenuGUI, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        mainMenuLayout.setVerticalGroup(
            mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeBtn)
                    .addComponent(dateNTime, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainMenuGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(mainMenu, "card2");

        addItem.setBackground(new java.awt.Color(0, 153, 153));
        addItem.setMaximumSize(new java.awt.Dimension(900, 900));
        addItem.setMinimumSize(new java.awt.Dimension(100, 100));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2), "Product Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel1.setText("Product Name:");

        pNameTxt.setNextFocusableComponent(pQtyTxt);
        pNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pNameTxtActionPerformed(evt);
            }
        });
        pNameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pNameTxtKeyReleased(evt);
            }
        });

        jLabel3.setText("Quantity:");
        jLabel3.setOpaque(true);

        pQtyTxt.setNextFocusableComponent(pRateTxt);
        pQtyTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pQtyTxtKeyTyped(evt);
            }
        });

        jLabel4.setText("Purchase Rate:");

        pRateTxt.setNextFocusableComponent(pProTxt);
        pRateTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pRateTxtKeyTyped(evt);
            }
        });

        jLabel5.setText("Profit Percent:");

        pProTxt.setNextFocusableComponent(pEntDateTxt);
        pProTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pProTxtKeyTyped(evt);
            }
        });

        jLabel6.setText("Entry Date:");

        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Expiry Date:");

        updateBtn.setText("UPDATE");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        addBackBtn.setText("BACK");
        addBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBackBtnActionPerformed(evt);
            }
        });

        pEntDateTxt.setToolTipText("Entry Date");
        pEntDateTxt.setDateFormatString("dd-MMM-yyyy");
        pEntDateTxt.setNextFocusableComponent(pExpDateTxt);

        pExpDateTxt.setToolTipText("Entry Date");
        pExpDateTxt.setDateFormatString("dd-MMM-yyyy");

        inMonthCB1.setText("In months");
        inMonthCB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inMonthCB1ActionPerformed(evt);
            }
        });

        inMonthTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inMonthTFKeyReleased(evt);
            }
        });

        jButton11.setText("CLEAR");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pNameTxt)
                    .addComponent(pQtyTxt)
                    .addComponent(pRateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pExpDateTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pEntDateTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pProTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(inMonthCB1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inMonthTF, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addBackBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pProTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(addBackBtn)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(pNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pEntDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pQtyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(addBtn)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(pRateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(pExpDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jButton11)))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inMonthCB1)
                            .addComponent(inMonthTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateBtn)))))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2), "In stock", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        stockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "P. Code", "P. Name", "Stock", "Entry Date", "Expiry Date", "Purc. Rate", "Pur. Amount", "Profit Percent", "Sell Rate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stockTable.setSelectionBackground(new java.awt.Color(51, 255, 204));
        stockTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        stockTable.getTableHeader().setReorderingAllowed(false);
        stockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stockTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(stockTable);
        if (stockTable.getColumnModel().getColumnCount() > 0) {
            stockTable.getColumnModel().getColumn(0).setResizable(false);
            stockTable.getColumnModel().getColumn(2).setResizable(false);
            stockTable.getColumnModel().getColumn(3).setResizable(false);
            stockTable.getColumnModel().getColumn(4).setResizable(false);
            stockTable.getColumnModel().getColumn(5).setResizable(false);
            stockTable.getColumnModel().getColumn(7).setResizable(false);
            stockTable.getColumnModel().getColumn(8).setResizable(false);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addContainerGap())
        );

        dateNTime1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dateNTime1.setText("Date and Time");

        closeBtn1.setBackground(new java.awt.Color(255, 102, 102));
        closeBtn1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        closeBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        closeBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addItemLayout = new javax.swing.GroupLayout(addItem);
        addItem.setLayout(addItemLayout);
        addItemLayout.setHorizontalGroup(
            addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemLayout.createSequentialGroup()
                .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addItemLayout.createSequentialGroup()
                        .addGap(587, 587, 587)
                        .addComponent(dateNTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeBtn1))
                    .addGroup(addItemLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        addItemLayout.setVerticalGroup(
            addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(addItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateNTime1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );

        getContentPane().add(addItem, "card3");

        billing.setBackground(new java.awt.Color(0, 153, 153));
        billing.setMaximumSize(new java.awt.Dimension(900, 900));
        billing.setMinimumSize(new java.awt.Dimension(100, 100));
        billing.setPreferredSize(new java.awt.Dimension(803, 372));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2), "Product Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel5.setMaximumSize(new java.awt.Dimension(1000, 800));

        jLabel7.setText("Prod. Code:");

        billPCode.setNextFocusableComponent(billQty);
        billPCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billPCodeMouseClicked(evt);
            }
        });
        billPCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                billPCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billPCodeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                billPCodeKeyTyped(evt);
            }
        });

        jLabel8.setText("Prod. Name:");

        billPName.setNextFocusableComponent(billPCode);
        billPName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billPNameMouseClicked(evt);
            }
        });
        billPName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                billPNameKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                billPNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billPNameKeyReleased(evt);
            }
        });

        jLabel9.setText("Quantity:");

        billQty.setNextFocusableComponent(addBillBtn);
        billQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billQtyActionPerformed(evt);
            }
        });
        billQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                billQtyKeyTyped(evt);
            }
        });

        billBackBtn.setText("BACK");
        billBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billBackBtnActionPerformed(evt);
            }
        });

        addBillBtn.setText("ADD");
        addBillBtn.setNextFocusableComponent(billPCode);
        addBillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBillBtnActionPerformed(evt);
            }
        });
        addBillBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addBillBtnKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                addBillBtnKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(22, 22, 22)
                        .addComponent(billPCode, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(20, 20, 20)
                        .addComponent(billPName, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(59, 59, 59)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(addBillBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(billBackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(billQty)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(billQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(billPName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(billBackBtn)
                        .addComponent(addBillBtn))
                    .addComponent(jLabel7)
                    .addComponent(billPCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dateNTime2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dateNTime2.setText("Date and Time");

        closeBtn2.setBackground(new java.awt.Color(255, 102, 102));
        closeBtn2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        closeBtn2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        closeBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtn2ActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2), "In Stock", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel6.setMaximumSize(new java.awt.Dimension(1000, 800));
        jPanel6.setPreferredSize(new java.awt.Dimension(32, 100));

        inStockTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "P. Code", "P. Name", "Exp. Date", "Stock", "Purc. Rate", "Sell Rate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inStockTab.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        inStockTab.getTableHeader().setReorderingAllowed(false);
        inStockTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inStockTabMouseClicked(evt);
            }
        });
        inStockTab.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inStockTabKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(inStockTab);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2), "Bill", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        billPrintPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("CSMT");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("BSF ACADEMY, TEKANPUR-475005");

        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S No", "Description", "Quantity", "Cost", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        billTable.setMaximumSize(new java.awt.Dimension(200, 64));
        billTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        billTable.getTableHeader().setReorderingAllowed(false);
        billTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billTableMouseClicked(evt);
            }
        });
        billTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billTableKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(billTable);
        if (billTable.getColumnModel().getColumnCount() > 0) {
            billTable.getColumnModel().getColumn(2).setHeaderValue("Quantity");
            billTable.getColumnModel().getColumn(3).setHeaderValue("Cost");
            billTable.getColumnModel().getColumn(4).setHeaderValue("Amount");
        }

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Total:");

        billGross.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        billGross.setText("0.0");
        billGross.setOpaque(true);

        billNo.setText("BILL NO:");

        billDateTime.setText("Date and Time:");

        printBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        printBtn.setText("PRINT");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        jLabel24.setText("NAME:");

        cname.setText("CSMT CUSTOMER");

        jLabel25.setText("UNIT");

        javax.swing.GroupLayout billPrintPanelLayout = new javax.swing.GroupLayout(billPrintPanel);
        billPrintPanel.setLayout(billPrintPanelLayout);
        billPrintPanelLayout.setHorizontalGroup(
            billPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billPrintPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(billPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(billNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, billPrintPanelLayout.createSequentialGroup()
                        .addComponent(billDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addGroup(billPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, billPrintPanelLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(billGross, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(printBtn, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(billPrintPanelLayout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cname, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(billPrintPanelLayout.createSequentialGroup()
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cunit, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        billPrintPanelLayout.setVerticalGroup(
            billPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billPrintPanelLayout.createSequentialGroup()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(billPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(billPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cunit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(billNo)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(billPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(billGross))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(billPrintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(billDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(billPrintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(billPrintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout billingLayout = new javax.swing.GroupLayout(billing);
        billing.setLayout(billingLayout);
        billingLayout.setHorizontalGroup(
            billingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billingLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(billingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(billingLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dateNTime2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(closeBtn2))
                    .addGroup(billingLayout.createSequentialGroup()
                        .addGroup(billingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        billingLayout.setVerticalGroup(
            billingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billingLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(billingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(billingLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(dateNTime2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(closeBtn2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(billingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(billingLayout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(billing, "card4");

        salesRecord.setBackground(new java.awt.Color(0, 153, 153));

        dateNTime3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dateNTime3.setText("Date and Time");

        closeBtn3.setBackground(new java.awt.Color(255, 102, 102));
        closeBtn3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        closeBtn3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        closeBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtn3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monthly", " " }));

        jLabel21.setText("Sort by:");

        jLabel22.setText("Month:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        jLabel23.setText("Year");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("PRINT");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        saleSessionApplyBtn.setText("APPLY");
        saleSessionApplyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleSessionApplyBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(saleSessionApplyBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(23, 23, 23))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(saleSessionApplyBtn))
                .addContainerGap())
        );

        sessionSaleTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo", "Prod Code", "Prod Name", "Sold Qty", "Purch Rate", "Purch Amount", "Sell Rate", "Sell Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sessionSaleTab.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sessionSaleTab.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(sessionSaleTab);
        if (sessionSaleTab.getColumnModel().getColumnCount() > 0) {
            sessionSaleTab.getColumnModel().getColumn(0).setResizable(false);
            sessionSaleTab.getColumnModel().getColumn(1).setResizable(false);
            sessionSaleTab.getColumnModel().getColumn(2).setResizable(false);
            sessionSaleTab.getColumnModel().getColumn(3).setResizable(false);
            sessionSaleTab.getColumnModel().getColumn(4).setResizable(false);
            sessionSaleTab.getColumnModel().getColumn(5).setResizable(false);
            sessionSaleTab.getColumnModel().getColumn(6).setResizable(false);
            sessionSaleTab.getColumnModel().getColumn(7).setResizable(false);
        }

        javax.swing.GroupLayout saleRecordPanelLayout = new javax.swing.GroupLayout(saleRecordPanel);
        saleRecordPanel.setLayout(saleRecordPanelLayout);
        saleRecordPanelLayout.setHorizontalGroup(
            saleRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saleRecordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        saleRecordPanelLayout.setVerticalGroup(
            saleRecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saleRecordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                .addContainerGap())
        );

        salePAmt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        salePAmt.setText("Total Purch Amt:");

        saleSAmt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        saleSAmt.setText("Total Sell Amt:");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(salePAmt)
                .addGap(102, 102, 102)
                .addComponent(saleSAmt)
                .addGap(104, 104, 104))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salePAmt)
                    .addComponent(saleSAmt))
                .addContainerGap())
        );

        javax.swing.GroupLayout salesRecordLayout = new javax.swing.GroupLayout(salesRecord);
        salesRecord.setLayout(salesRecordLayout);
        salesRecordLayout.setHorizontalGroup(
            salesRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesRecordLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(salesRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saleRecordPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, salesRecordLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dateNTime3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeBtn3))
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        salesRecordLayout.setVerticalGroup(
            salesRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesRecordLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(salesRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeBtn3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateNTime3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saleRecordPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(salesRecord, "card5");

        stockStatus.setBackground(new java.awt.Color(0, 153, 153));

        dateNTime4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dateNTime4.setText("Date and Time");

        closeBtn4.setBackground(new java.awt.Color(255, 102, 102));
        closeBtn4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        closeBtn4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        closeBtn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtn4ActionPerformed(evt);
            }
        });

        stockStatTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S No", "Prod Code", "Prod Name", "Added to Stock", "Sold Stock", "Purchase Rate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stockStatTab.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        stockStatTab.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(stockStatTab);
        if (stockStatTab.getColumnModel().getColumnCount() > 0) {
            stockStatTab.getColumnModel().getColumn(0).setResizable(false);
            stockStatTab.getColumnModel().getColumn(1).setResizable(false);
            stockStatTab.getColumnModel().getColumn(2).setResizable(false);
            stockStatTab.getColumnModel().getColumn(3).setResizable(false);
            stockStatTab.getColumnModel().getColumn(4).setResizable(false);
            stockStatTab.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout stockStatPanelLayout = new javax.swing.GroupLayout(stockStatPanel);
        stockStatPanel.setLayout(stockStatPanelLayout);
        stockStatPanelLayout.setHorizontalGroup(
            stockStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stockStatPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        stockStatPanelLayout.setVerticalGroup(
            stockStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stockStatPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        jLabel26.setText("Product Code");

        jLabel27.setText("Product Name");

        jLabel28.setText("Month");

        monthCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        jLabel29.setText("Year");

        yearCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        stockRecordApplyBtn.setText("APPLY");
        stockRecordApplyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockRecordApplyBtnActionPerformed(evt);
            }
        });

        jButton3.setText("PRINT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton9.setText("BACK");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addGap(0, 70, Short.MAX_VALUE)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton9))
                            .addComponent(stockRecordApplyBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel28)
                                    .addComponent(jLabel29))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(yearCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(monthCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel27))
                                .addGap(12, 12, 12)
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(stockPCode, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(stockPName))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(stockPCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(stockPName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(monthCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(yearCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(stockRecordApplyBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 236, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton9))
                .addContainerGap())
        );

        javax.swing.GroupLayout stockStatusLayout = new javax.swing.GroupLayout(stockStatus);
        stockStatus.setLayout(stockStatusLayout);
        stockStatusLayout.setHorizontalGroup(
            stockStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(stockStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(stockStatusLayout.createSequentialGroup()
                        .addGap(0, 336, Short.MAX_VALUE)
                        .addComponent(dateNTime4, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeBtn4))
                    .addComponent(stockStatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        stockStatusLayout.setVerticalGroup(
            stockStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockStatusLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(stockStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeBtn4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateNTime4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(stockStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stockStatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(stockStatus, "card6");

        billCancel.setBackground(new java.awt.Color(0, 153, 153));

        dateNTime5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dateNTime5.setText("Date and Time");

        closeBtn5.setBackground(new java.awt.Color(255, 102, 102));
        closeBtn5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        closeBtn5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        closeBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtn5ActionPerformed(evt);
            }
        });

        billNoContentTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S No", "Product Code", "Description", "Quantity", "Sell Rate", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        billNoContentTab.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        billNoContentTab.getTableHeader().setReorderingAllowed(false);
        billNoContentTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billNoContentTabMouseClicked(evt);
            }
        });
        billNoContentTab.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billNoContentTabKeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(billNoContentTab);
        if (billNoContentTab.getColumnModel().getColumnCount() > 0) {
            billNoContentTab.getColumnModel().getColumn(0).setResizable(false);
            billNoContentTab.getColumnModel().getColumn(1).setResizable(false);
            billNoContentTab.getColumnModel().getColumn(3).setResizable(false);
            billNoContentTab.getColumnModel().getColumn(4).setResizable(false);
            billNoContentTab.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addContainerGap())
        );

        billNTxt.setEditable(false);

        jLabel31.setText("Bill No:");

        jLabel32.setText("Prod Name:");

        billNameTxt.setEditable(false);

        jLabel33.setText("Prod Qty:");

        billQtyTxt.setEditable(false);

        jLabel34.setText("Amount:");

        billAmtTxt.setEditable(false);

        jLabel35.setText("Date:");

        billDTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        returnBillBtn.setText("RETURN");
        returnBillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBillBtnActionPerformed(evt);
            }
        });

        returnEntireCB.setText("Return Entire Bill");

        jLabel37.setText("Bill Total:");

        billGTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        billCodeTxt.setEditable(false);

        jLabel36.setText("Prod Code:");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addGap(0, 103, Short.MAX_VALUE)
                        .addComponent(returnEntireCB)
                        .addGap(20, 20, 20)
                        .addComponent(returnBillBtn))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel15Layout.createSequentialGroup()
                                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel32)
                                    .addComponent(jLabel33)
                                    .addComponent(jLabel34))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(billNameTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(billQtyTxt)
                                    .addComponent(billAmtTxt)))
                            .addGroup(jPanel15Layout.createSequentialGroup()
                                .addComponent(jLabel37)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(billGTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel15Layout.createSequentialGroup()
                                .addComponent(jLabel36)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(billCodeTxt))
                            .addGroup(jPanel15Layout.createSequentialGroup()
                                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel31)
                                    .addComponent(jLabel35))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(billDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(billNTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(billNTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(billDTxt))
                .addGap(8, 8, 8)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(billGTxt))
                .addGap(41, 41, 41)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(billCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(billNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(billQtyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(billAmtTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnBillBtn)
                    .addComponent(returnEntireCB))
                .addContainerGap(147, Short.MAX_VALUE))
        );

        jLabel30.setText("Bill No:");

        billNoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billNoTxtActionPerformed(evt);
            }
        });

        billSOK.setText("OK");
        billSOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billSOKActionPerformed(evt);
            }
        });

        billBack.setText("BACK");
        billBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(billNoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(billBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(billSOK)
                .addGap(32, 32, 32))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(billNoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(billSOK)
                    .addComponent(billBack))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout billCancelLayout = new javax.swing.GroupLayout(billCancel);
        billCancel.setLayout(billCancelLayout);
        billCancelLayout.setHorizontalGroup(
            billCancelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, billCancelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(billCancelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(billCancelLayout.createSequentialGroup()
                        .addGroup(billCancelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(billCancelLayout.createSequentialGroup()
                        .addComponent(dateNTime5, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeBtn5)))
                .addContainerGap())
        );
        billCancelLayout.setVerticalGroup(
            billCancelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billCancelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(billCancelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeBtn5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateNTime5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(billCancelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(billCancelLayout.createSequentialGroup()
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(billCancel, "card7");

        todaySale.setBackground(new java.awt.Color(0, 153, 153));

        dateNTime6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dateNTime6.setText("Date and Time");

        closeBtn6.setBackground(new java.awt.Color(255, 102, 102));
        closeBtn6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        closeBtn6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        closeBtn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtn6ActionPerformed(evt);
            }
        });

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2), "Todays Sale Record", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        daySaleTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S No", "Description", "In Stock", "Quantity", "Sell Rate", "Amount", "Profit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        daySaleTab.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        daySaleTab.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(daySaleTab);
        if (daySaleTab.getColumnModel().getColumnCount() > 0) {
            daySaleTab.getColumnModel().getColumn(0).setResizable(false);
            daySaleTab.getColumnModel().getColumn(1).setResizable(false);
            daySaleTab.getColumnModel().getColumn(2).setResizable(false);
            daySaleTab.getColumnModel().getColumn(3).setResizable(false);
            daySaleTab.getColumnModel().getColumn(4).setResizable(false);
            daySaleTab.getColumnModel().getColumn(5).setResizable(false);
            daySaleTab.getColumnModel().getColumn(6).setResizable(false);
        }

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel18.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel39.setText("Total Sale Cost:");

        tSaleCost.setEditable(false);

        jLabel40.setText("No of diff items sold:");

        jLabel41.setText("Total profit:");

        tProfit.setEditable(false);

        noOfItem.setEditable(false);

        jLabel42.setText("Total Sale Amount:");

        tSaleAmt.setEditable(false);

        jButton2.setText("PRINT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton5.setText("BACK");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(noOfItem, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(tSaleCost, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 217, Short.MAX_VALUE)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tProfit)
                    .addComponent(tSaleAmt, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(tSaleCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42)
                    .addComponent(tSaleAmt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel40)
                                .addComponent(noOfItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel41))
                            .addComponent(tProfit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)))
                .addContainerGap())
        );

        javax.swing.GroupLayout todaySaleLayout = new javax.swing.GroupLayout(todaySale);
        todaySale.setLayout(todaySaleLayout);
        todaySaleLayout.setHorizontalGroup(
            todaySaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(todaySaleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(todaySaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, todaySaleLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dateNTime6, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeBtn6))
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        todaySaleLayout.setVerticalGroup(
            todaySaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(todaySaleLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(todaySaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeBtn6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateNTime6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(todaySale, "card8");

        pack();
    }// </editor-fold>//GEN-END:initComponents
//sset escape

    void setExc() {

        InputMap im1 = addItem.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        InputMap im2 = billing.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        InputMap im3 = salesRecord.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        InputMap im4 = stockStatus.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        InputMap im5 = billCancel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        InputMap im6 = todaySale.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        Object actionKey = new Object();

        im1.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), actionKey);
        im2.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), actionKey);
        im3.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), actionKey);
        im4.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), actionKey);
        im5.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), actionKey);
        im6.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), actionKey);

        addItem.getActionMap().put(actionKey, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent event) {
                closeBtn1.doClick();
            }
        });
        billing.getActionMap().put(actionKey, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent event) {
                closeBtn2.doClick();
            }
        });
        salesRecord.getActionMap().put(actionKey, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent event) {
                closeBtn3.doClick();
            }
        });
        stockStatus.getActionMap().put(actionKey, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent event) {
                closeBtn4.doClick();
            }
        });
        billCancel.getActionMap().put(actionKey, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent event) {
                closeBtn5.doClick();
            }
        });
        todaySale.getActionMap().put(actionKey, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent event) {
                closeBtn6.doClick();
            }
        });

    }

// set billtable selection listener
    void setBT() {
        ListSelectionModel cellSelectionModel = billTable.getSelectionModel();
        // cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                if (e.getSource() == billTable.getSelectionModel() && !e.getValueIsAdjusting()) {

                    Object selectedData = null;

                    int selectedRow = billTable.getSelectedRow();
                    // int selectedColumns = billTable.getSelectedColumn();

                    DefaultTableModel tm = (DefaultTableModel) billTable.getModel();
                    if (billTable.getSelectedRowCount() == 1) {
                        selectedData = (Object) billTable.getValueAt(selectedRow, 2);

                        System.out.println("Selected: " + selectedData.toString());
                        char c[] = selectedData.toString().toCharArray();
                        boolean quan = true;
                        for (char x : c) {
                            if (!Character.isDigit(x)) {
                                quan = false;
                            }
                        }

                        if (quan) {
                            quant = Integer.parseInt(selectedData.toString());
                        }

                    } else {
                        System.out.println("Selected: nono");
                    }

                }
            }
        });

    }

// click in billNoContentTab
    void billNoContentTabSelected() {

        int r = billNoContentTab.getSelectedRow();
        String pCode, pName, pQty, pAmt;
        pCode = String.valueOf(billNoContentTab.getValueAt(r, 1));
        pName = String.valueOf(billNoContentTab.getValueAt(r, 2));
        pQty = String.valueOf(billNoContentTab.getValueAt(r, 3));
        pAmt = String.valueOf(billNoContentTab.getValueAt(r, 5));

        billCodeTxt.setText(pCode);
        billNameTxt.setText(pName);
        billQtyTxt.setText(pQty);
        billAmtTxt.setText(pAmt);

    }

    //clear billCancel
    void clearBillCancel() {
        DefaultTableModel tm = (DefaultTableModel) billNoContentTab.getModel();
        tm.setRowCount(0);

        billNTxt.setText("");
        billDTxt.setText("");
        billGTxt.setText("");
        billCodeTxt.setText("");
        billNameTxt.setText("");
        billQtyTxt.setText("");
        billAmtTxt.setText("");
        billNoTxt.requestFocus();
        returnBillBtn.setEnabled(false);
        returnEntireCB.setEnabled(false);

    }

    // return bill
    void returnBill(boolean fullReturn) {

        if (fullReturn) {
            try {

                String ss = "select pCode,pQty from billinfo where billCode ='" + billNTxt.getText() + "';";
                ps = conn.prepareStatement(ss);
                rs = ps.executeQuery();

                while (rs.next()) {
                    String pCode = rs.getString("pCode");
                    int pQty = rs.getInt("pQty");

                    String sq = " update csmtproductinfo set "
                            + "pStock=pStock+" + pQty + " "
                            + "where pCode='" + pCode + "';";
                    ps = conn.prepareStatement(sq);
                    ps.executeUpdate();

                    sq = "select billgendate from csmtBill where billCode='" + billNTxt.getText() + "';";
                    ps = conn.prepareStatement(sq);
                    rs = ps.executeQuery();

                    //java.util.Date sdate;
                    SimpleDateFormat sdf = new SimpleDateFormat("MMM/YY");
                    try {
                        if (rs.next()) {

                            Date billGenDate = rs.getDate("billGenDate");
                            String sdate = sdf.format(billGenDate).toUpperCase();
                            session = sdate.substring(0, 3) + sdate.substring(4, 6);
                            //System.out.println("bill session:"+session);
                            sq = " update stocknsale set "
                                    + "sellStock=sellStock-" + pQty + " "
                                    + "where pCode='" + pCode + "' and session='" + session + "';";
                            ps = conn.prepareStatement(sq);
                            ps.executeUpdate();
                        }
                    } catch (Exception ex) {
                        System.out.println("Unable to convert to java date format");
                        JOptionPane.showMessageDialog(null, "Error!!");
                    }
                    //enDate = tt.parse((String) (stockTable.getValueAt(r, 3)));
                    //exDate = tt.parse((String) (stockTable.getValueAt(r, 4)));

                }

                String del = "delete from billinfo where billCode ='" + billNTxt.getText() + "';";
                ps = conn.prepareStatement(del);
                ps.executeUpdate();

                String delbill = "delete from csmtbill where billCode ='" + billNTxt.getText() + "';";
                ps = conn.prepareStatement(delbill);
                ps.executeUpdate();

                billNoTxt.setText("");
                clearBillCancel();
                billNoTxt.requestFocus();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(sf, "Can't return full bill", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            try {

                String ss = "select pCode,pQty,pRate from billinfo where billCode ='" + billNTxt.getText() + "' and pCode='" + billCodeTxt.getText() + "';";
                ps = conn.prepareStatement(ss);
                rs = ps.executeQuery();

                while (rs.next()) {
                    String pCode = rs.getString("pCode");
                    int pQty = rs.getInt("pQty");
                    float pRate = rs.getFloat("pRate");

                    String sq = " update csmtproductinfo set "
                            + "pStock=pStock+" + pQty + " "
                            + "where pCode='" + pCode + "';";
                    ps = conn.prepareStatement(sq);
                    ps.executeUpdate();

                    sq = "select billgendate from csmtBill where billCode='" + billNTxt.getText() + "';";
                    ps = conn.prepareStatement(sq);
                    rs = ps.executeQuery();

                    //java.util.Date sdate;
                    SimpleDateFormat sdf = new SimpleDateFormat("MMM/YY");
                    try {
                        if (rs.next()) {

                            Date billGenDate = rs.getDate("billGenDate");
                            String sdate = sdf.format(billGenDate).toUpperCase();
                            session = sdate.substring(0, 3) + sdate.substring(4, 6);
                            System.out.println("bill session:" + session);
                            sq = " update stocknsale set "
                                    + "sellStock=sellStock-" + pQty + " "
                                    + "where pCode='" + pCode + "' and session='" + session + "';";
                            ps = conn.prepareStatement(sq);
                            ps.executeUpdate();
                        }
                    } catch (Exception ex) {
                        System.out.println("Unable to convert to java date format");
                        JOptionPane.showMessageDialog(null, "Error!!");
                    }
                    //enDate = tt.parse((String) (stockTable.getValueAt(r, 3)));
                    //exDate = tt.parse((String) (stockTable.getValueAt(r, 4)));

                    String del = "delete from billinfo where billCode ='" + billNTxt.getText() + "' and pCode='" + billCodeTxt.getText() + "';";
                    ps = conn.prepareStatement(del);
                    ps.executeUpdate();

                    String upd = "update csmtbill set "
                            + "billAmt=billAmt-" + Float.parseFloat(String.format("%.4f", (pQty * pRate)))
                            + " where billCode ='" + billNTxt.getText() + "';";
                    ps = conn.prepareStatement(upd);
                    ps.executeUpdate();

                    billCancelShow();

                    billNoContentTab.requestFocus();
                    billNoContentTab.changeSelection(0, 1, false, false);
                    billNoContentTabSelected();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(sf, "Can't return this product!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        }

    }

    // billCancelshow on ok click
    boolean billCancelShow() {

        String billN = billNoTxt.getText().trim();

        //System.out.println(row+" "+col);
        if (billN.length() < 1) {

            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b><i>*Enter bill no", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            billNoTxt.requestFocus();
            billNoTxt.setText("");
            clearBillCancel();
            return false;
        } else {

            try {

                String ss = "select billCode,billGenDate,billAmt from csmtbill where billCode ='" + billN + "';";
                ps = conn.prepareStatement(ss);
                rs = ps.executeQuery();

                if (rs.next()) {
                    DefaultTableModel tm = (DefaultTableModel) billNoContentTab.getModel();
                    tm.setRowCount(0);

                    SimpleDateFormat sdft = new SimpleDateFormat("dd-MMM-yyyy");
                    Date billGenDate = rs.getDate("billGenDate");
                    double billAmt = rs.getDouble("billAmt");

                    String sq = "select pCode,pName,pQty,pRate from billinfo where billCode ='" + billN + "';";
                    ps = conn.prepareStatement(sq);
                    rs = ps.executeQuery();

                    billNTxt.setText(billN);
                    billDTxt.setText(String.valueOf(billGenDate));
                    billGTxt.setText(String.valueOf(billAmt) + " " + RUPEE);

                    while (rs.next()) {
                        String pCode = rs.getString("pCode");
                        String pName = rs.getString("pName");
                        int pQty = rs.getInt("pQty");
                        float pRate = rs.getFloat("pRate");
                        int sno = billNoContentTab.getRowCount();

                        tm.addRow(new Object[]{
                            sno + 1,
                            pCode,
                            pName,
                            pQty,
                            pRate,
                            Float.parseFloat(String.format("%.2f", (pQty * pRate)))});

                    }
                    return true;

                } else {
                    JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b><i>*Bill No. not found", "ERRROR!", JOptionPane.ERROR_MESSAGE);
                    billNoTxt.requestFocus();
                    clearBillCancel();
                    return false;
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(sf, "Error in bill no. search!", "ERROR", JOptionPane.ERROR_MESSAGE);
                return false;
            }

        }

    }

    // update stock after bill\
    boolean updateStock() {
        try {
            String ss = "UPDATE csmtproductinfo inner join tempBill ON csmtproductinfo.pCode=tempBill.pCode set csmtproductinfo.pStock=csmtproductinfo.pStock-tempBill.pQty;";

            ps = conn.prepareStatement(ss);
            ps.executeUpdate();
            return true;

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Can't update stock", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    // insert into csmtbill table and billinfo table in db
    boolean insertIntoCsmtBill() throws SQLException {
        String billN = billNo.getText().trim().substring(8).trim();
        Calendar cc = Calendar.getInstance();
        java.util.Date d = cc.getTime();
        Date pEntryD = new Date(d.getTime());
        String ss = billGross.getText();
        int l = ss.length();
        float amt = Float.parseFloat(ss.substring(0, l - 2));
        try {

            String sq = "insert into csmtbill values(?,?,?)";

            ps = conn.prepareStatement(sq);
            ps.setString(1, billN);
            ps.setDate(2, pEntryD);
            ps.setFloat(3, amt);

            ps.executeUpdate();

            try {

                String ssq = "insert into billinfo select '" + billN + "',pCode,pName,pQty,pRate from tempBill;";

                ps = conn.prepareStatement(ssq);
                ps.executeUpdate();

                //     conn.commit();
                //     conn.setAutoCommit(true);
                return true;
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Error! in billInfo", "ERRROR!", JOptionPane.ERROR_MESSAGE);
                //     conn.rollback();
                //   conn.setAutoCommit(true);
                return false;
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Error! in csmtbill", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            //  conn.rollback();
            //   conn.setAutoCommit(true);
            return false;
        }
    }

    //set billNo
    void setBillNo() {
        Calendar cc = Calendar.getInstance();
        java.util.Date d = cc.getTime();
        int a = d.getDate();
        int c = d.getDay();
        int b = d.getHours();
        int e = d.getMinutes();
        int f = d.getSeconds();
        int g = d.getYear() % 100;
        String billString = String.format("%02d%02d%02d%02d%02d%02d", a, b, c, e, f, g);
        billNo.setText("Bill No: " + billString);
        cname.setText("CSMT CUSTOMER");
        cunit.setText("");
    }

    // to clear tempBill table
    void clearTempBill() {
        try {
            String sq = "delete from tempBill;";
            ps = conn.prepareStatement(sq);
            ps.executeUpdate();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Error! Please contact us @RJITGEEK!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
        }
    }

// intial values for add item panel
    private void setAddItem() {
        inMonthCB1.setSelected(true);
        inMonthTF.setEnabled(true);
        pExpDateTxt.setEnabled(false);
        Calendar cc = Calendar.getInstance();
        java.util.Date d = cc.getTime();
        pNameTxt.setText("");
        pQtyTxt.setText("");
        pRateTxt.setText("");
        pEntDateTxt.setDate(d);
        pExpDateTxt.setDate(d);
        pProTxt.setText("2");
        inMonthTF.setText("0");
    }

    // update add itme table to all product by entry date
    private void addItemTableUpdate(String s1, String forWhat) {
        try {

            String sqst = "select * from csmtproductinfo where pName like '" + s1 + "%' order by pEntryDate desc;";
            ps = conn.prepareStatement(sqst);
            rs = ps.executeQuery();

            DefaultTableModel tm = (DefaultTableModel) stockTable.getModel();
            tm.setRowCount(0);
            SimpleDateFormat sdft = new SimpleDateFormat("dd-MMM-yyyy");

            while (rs.next()) {
                String pCode = rs.getString("pCode");
                String pName = rs.getString("pName");
                int pStock = rs.getInt("pStock");
                float pRate = rs.getFloat("pRate");
                Date pExDate = rs.getDate("pExpiryDate");
                Date pEnDate = rs.getDate("pEntryDate");
                float pProfit = rs.getFloat("pProfit");
                float cost = Float.parseFloat(String.format("%.4f", pRate + ((pProfit * pRate) / 100)));

                // Java8 way for today's date      
                SimpleDateFormat sdcur = new SimpleDateFormat("yyyy-MM-dd");
                LocalDate today = LocalDate.now();
                // int year = today.getYear(); 
                // int month = today.getMonthValue(); 
                //int day = today.getDayOfMonth();

                LocalDate enDate = pEnDate.toLocalDate();

                Period periodToOver = Period.between(enDate, today);
                System.out.println("Months left between today and entry : " + (periodToOver.getMonths() + 1));

                if (periodToOver.getMonths() >= 5) {

                    tm.addRow(new Object[]{
                        "<html><b><font color=\"red\">" + (String) pCode,
                        "<html><b><font color=\"red\">" + (String) pName,
                        "<html><b><font color=\"red\">" + (Integer) pStock,
                        "<html><b><font color=\"red\">" + (String) sdft.format(pEnDate),
                        "<html><b><font color=\"red\">" + (String) sdft.format(pExDate),
                        "<html><b><font color=\"red\">" + (Float) Float.parseFloat(String.format("%.3f", pRate)),
                        "<html><b><font color=\"red\">" + (Float) Float.parseFloat(String.format("%.02f", pRate * pStock)),
                        "<html><b><font color=\"red\">" + (Float) Float.parseFloat(String.format("%.2f", pProfit)),
                        "<html><b><font color=\"red\">" + (Float) cost
                        
                    });

                } else if (periodToOver.getMonths() >= 2) {

                    tm.addRow(new Object[]{
                        "<html><b><font color=\"orange\">" + (String) pCode,
                        "<html><b><font color=\"orange\">" + (String) pName,
                        "<html><b><font color=\"orange\">" + (Integer) pStock,
                        "<html><b><font color=\"orange\">" + (String) sdft.format(pEnDate),
                        "<html><b><font color=\"orange\">" + (String) sdft.format(pExDate),
                        "<html><b><font color=\"orange\">" + (Float) Float.parseFloat(String.format("%.3f", pRate)),
                        "<html><b><font color=\"orange\">" + (Float) Float.parseFloat(String.format("%.02f", pRate * pStock)),
                        "<html><b><font color=\"orange\">" + (Float) Float.parseFloat(String.format("%.2f", pProfit)),
                        "<html><b><font color=\"orange\">" + (Float) cost
                        
                    });

                } else {
                    tm.addRow(new Object[]{
                        (String) pCode,
                        (String) pName,
                        (Integer) pStock,
                        (String) sdft.format(pEnDate),
                        (String) sdft.format(pExDate),
                        (Float) Float.parseFloat(String.format("%.3f", pRate)),
                        (Float) Float.parseFloat(String.format("%.02f", pRate * pStock)),
                        (Float) Float.parseFloat(String.format("%.2f", pProfit)),
                        (Float) cost
                        
                    });
                }

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Error! could not fetch " + forWhat, "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    // show the entries in billST table by searching from the database table
    void showAllInBillST(String s1, String s2, String forWhat) {

        try {

            String ss = "select pCode,pName,pStock,pRate,pEntryDate,pExpiryDate,pProfit from csmtproductinfo where pCode like '" + s1 + "%' and pName like '%" + s2 + "%';";
            ps = conn.prepareStatement(ss);
            rs = ps.executeQuery();

            DefaultTableModel tm = (DefaultTableModel) inStockTab.getModel();
            tm.setRowCount(0);

            SimpleDateFormat sdft = new SimpleDateFormat("dd-MMM-yyyy");

            while (rs.next()) {
                String pCode = rs.getString("pCode");
                String pName = rs.getString("pName");
                int pStock = rs.getInt("pStock");
                float pRate = rs.getFloat("pRate");
                Date pEnDate = rs.getDate("pEntryDate");
                Date pExDate = rs.getDate("pExpiryDate");
                float pProfit = rs.getFloat("pProfit");

                // search tempBill table
                String ss2 = "select pQty from tempBill where pCode ='" + pCode + "';";
                PreparedStatement px = conn.prepareStatement(ss2);
                ResultSet rx = px.executeQuery();

                int pQty = 0;
                if (rx.next()) {
                    pQty = rx.getInt("pQty");
                }
                if ((pStock - pQty) == 0) {
                    continue;
                }

                // added here             
                // Java8 way for today's date      
                SimpleDateFormat sdcur = new SimpleDateFormat("yyyy-MM-dd");
                LocalDate today = LocalDate.now();
                // int year = today.getYear(); 
                // int month = today.getMonthValue(); 
                //int day = today.getDayOfMonth();

                LocalDate enDate = pEnDate.toLocalDate();

                Period periodToOver = Period.between(enDate, today);
                System.out.println("Months left between today and entry : " + (periodToOver.getMonths() + 1));

                if (periodToOver.getMonths() >= 5) {

                    tm.addRow(new Object[]{
                        "<html><b><font color=\"red\">" + pCode,
                        "<html><b><font color=\"red\">" + pName,
                        "<html><b><font color=\"red\">" + sdft.format(pExDate),
                        "<html><b><font color=\"red\">" + (pStock - pQty),
                        "<html><b><font color=\"red\">" + Float.parseFloat(String.format("%.2f", pRate)),
                        "<html><b><font color=\"red\">" + Float.parseFloat(String.format("%.2f", pRate + (pProfit / 100 * pRate)))});

                } else if (periodToOver.getMonths() >= 2) {

                    tm.addRow(new Object[]{
                        "<html><b><font color=\"orange\">" + pCode,
                        "<html><b><font color=\"orange\">" + pName,
                        "<html><b><font color=\"orange\">" + sdft.format(pExDate),
                        "<html><b><font color=\"orange\">" + (pStock - pQty),
                        "<html><b><font color=\"orange\">" + Float.parseFloat(String.format("%.2f", pRate)),
                        "<html><b><font color=\"orange\">" + Float.parseFloat(String.format("%.2f", pRate + (pProfit / 100 * pRate)))});

                } else {
                    tm.addRow(new Object[]{
                        pCode,
                        pName,
                        sdft.format(pExDate),
                        pStock - pQty,
                        Float.parseFloat(String.format("%.2f", pRate)),
                        Float.parseFloat(String.format("%.2f", pRate + (pProfit / 100 * pRate)))});

                }

            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(sf, "Error in " + forWhat + " search!");
        }

    }

    // set popup dialog for update		
    private void setPop(String pCode, String pName, String pQty, String pRate, String pPro, java.util.Date pEntD, java.util.Date pExpD) {
        //setPop(pCode,pName,pQty,pRate,pPro,enDate,exDate);		
        popProdCode.setText(pCode);
        popProdName.setText(pName);
        popProdQty.setText(pQty);
        popProdRate.setText(pRate);
        popProdProfit.setText(pPro);
        popEntDate.setDate(pEntD);
        popExpDate.setDate(pExpD);
    }

    //set total amount in billT
    void setTotal() {
        DefaultTableModel model2 = (DefaultTableModel) billTable.getModel();
        int rowCount = billTable.getRowCount();
        float totalAmt = 0;
        for (int i = 0; i < rowCount; i++) {
            totalAmt += (Float) billTable.getValueAt(i, 4);
        }
        String setAmt = String.format("%.2f " + RUPEE, totalAmt);
        billGross.setText(setAmt);
    }

    //set enter key event for BillST table
    void setT() {

        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(SwingConstants.LEFT);
        billTable.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        billTable.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        billTable.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        billTable.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
        billTable.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);

        billTable.getModel().addTableModelListener(
                new TableModelListener() {
            public void tableChanged(TableModelEvent evt) {
                pressEnterInTableBillT(evt);
            }
        });

        InputMap im = inStockTab.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        Object actionKey = new Object();

        InputMap im2 = billTable.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        im2.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), actionKey);

        billTable.getActionMap().put(actionKey, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent event) {
                pressDelete(event);
            }
        });

        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), actionKey);
        inStockTab.getActionMap().put(actionKey, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent event) {
                pressEnterInTable(event);
            }
        });

    }

    // press delete in billTable
    void pressDelete(ActionEvent e) {
        //int r = billTable.getSelectedRow();
        DefaultTableModel tm = (DefaultTableModel) billTable.getModel();
        int row = billTable.getSelectedRow();
        int sno = (Integer) billTable.getValueAt(row, 0);
        int conf = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete", JOptionPane.YES_NO_OPTION);
        if (conf == 0) {
            if (delFromTempBill(sno)) {
                billTable.clearSelection();
                tm.removeRow(row);
                int r = row, end = tm.getRowCount();
                while (r < end) {
                    try {
                        int tmp = r + 1 + 1;

                        String sq = "select pCode from tempbill where sno=" + tmp + ";";
                        ps = conn.prepareStatement(sq);
                        rs = ps.executeQuery();

                        if (rs.next()) {
                            String pcode = rs.getString("pCode");

                            tmp = r + 1;
                            sq = "update tempbill set sno=" + tmp + " where pcode='" + pcode + "';";
                            ps = conn.prepareStatement(sq);
                            ps.executeUpdate();
                            tm.setValueAt(tmp, r, 0);
                        }
                        r++;
                    } catch (SQLException se) {
                        JOptionPane.showMessageDialog(null, "Error!" + se);
                    }

                }
                setTotal();
            }
        }
    }

    // press down in table
    void pressUpDownInTable() {

        /*int r = inStockTab.getSelectedRow();

         billPCode.setText((String) inStockTab.getValueAt(r, 0));
         billPName.setText((String) inStockTab.getValueAt(r, 1));

         bPCode = billPCode.getText();
         bPName = billPName.getText();
         bPCost = (Float) inStockTab.getValueAt(r, 5);
         bPStock = (Integer) inStockTab.getValueAt(r, 3);
         */
    }

    void updatePCODE_PNAME() {
        /*int r = inStockTab.getSelectedRow();

         billPCode.setText((String) inStockTab.getValueAt(r, 0));
         billPName.setText((String) inStockTab.getValueAt(r, 1));

         bPCode = billPCode.getText();
         bPName = billPName.getText();
         bPCost = (Float) inStockTab.getValueAt(r, 5);
         bPStock = (Integer) inStockTab.getValueAt(r, 3);*/
    }

    //enter into billS table on enter button from billST
    void pressEnterInTable(ActionEvent e) {
        //updatePCODE_PNAME();
        billQty.requestFocusInWindow();

    }

    // press enter into the table BillT
    void pressEnterInTableBillT(TableModelEvent evt) {
        int co = evt.getColumn();
        int ro = evt.getFirstRow();
        if (evt.getType() == TableModelEvent.UPDATE && co == 2) {
            int qu = (Integer) billTable.getValueAt(ro, co);
            int sNo = (Integer) billTable.getValueAt(ro, 0);

            boolean checkS = checkStock(qu, sNo);

            if (checkS && qu > 0) {
                quant = qu;
                float amt = qu * (float) billTable.getValueAt(ro, co + 1);
                billTable.setValueAt(amt, ro, 4);
                setTotal();
                updateTempBill(qu, sNo);

            } else {
                billTable.setValueAt(quant, ro, co);
                JOptionPane.showMessageDialog(sf, "<html><font color=red size=4><b><i>Quantity is unavailable!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            }

        }
    }

    // TO GET PID
    String getPID(int sno) {

        try {
            String pCode = "";
            String sq = "select pCode from tempbill where sNo=" + sno + ";";
            ps = conn.prepareStatement(sq);
            rs = ps.executeQuery();
            if (rs.next()) {
                pCode = rs.getString("pCode");
            }
            return pCode;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Stock is less!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            return "";
        }
    }

    // check for stock on update of quantity
    boolean checkStock(int q, int sno) {

        try {
            String pCode;
            int pStock;
            String sq = "select pCode from tempbill where sNo=" + sno + ";";
            ps = conn.prepareStatement(sq);
            rs = ps.executeQuery();
            if (rs.next()) {
                pCode = rs.getString("pCode");

                String ss = "select pStock from csmtproductinfo where pCode = '" + pCode + "';";
                ps = conn.prepareStatement(ss);
                rs = ps.executeQuery();
                if (rs.next()) {
                    pStock = rs.getInt("pStock");
                    if (pStock < q) {
                        return false;
                    } else {
                        return true;
                    }
                }

            }
            return false;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Stock is less!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            return false;
        }

    }

    //check for dupEntry in billT 
    boolean checkForDup(int pqty, String pid) {

        try {
            int sno;
            String sq = "select sno from tempbill where pcode='" + pid + "';";
            ps = conn.prepareStatement(sq);
            rs = ps.executeQuery();
            if (rs.next()) {
                sno = rs.getInt("sNo");

                DefaultTableModel model2 = (DefaultTableModel) billTable.getModel();

                int rowl = model2.getRowCount();

                for (int i = 0; i < rowl; i++) {
                    int sNo = (Integer) billTable.getValueAt(i, 0);
                    if (sno == sNo) {
                        int oQty = (Integer) billTable.getValueAt(i, 2);
                        // update quantity in billT
                        billTable.setValueAt((Integer) (oQty + pqty), i, 2);
                        // update total in billT
                        float amt = Float.parseFloat(String.format("%.2f", ((oQty + pqty) * (Float) billTable.getValueAt(i, 3))));
                        billTable.setValueAt(amt, i, 4);
                        return updateTempBill((oQty + pqty), sNo);
                    }
                }
                return true;
            }

            return true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Error in update!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            return false;
        }

    }

    // update the quantity of tempBill table in db
    boolean updateTempBill(int pqty, int sno) {
        try {

            String sq = "update tempBill set pQty=" + pqty + " where sNo='" + sno + "';";
            ps = conn.prepareStatement(sq);
            ps.executeUpdate();
            billPCode.setText("");
            billPName.setText("");
            billQty.setText("");
            billPCode.requestFocus();
            enterInfo("show all after if already present");
            return false;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Error in update!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            return true;
        }

    }

    // delete from tempbill
    boolean delFromTempBill(int sno) {
        try {

            String sq = "delete from tempBill where sNo=" + sno + ";";
            ps = conn.prepareStatement(sq);
            ps.executeUpdate();
            enterInfo("show all after delete from tempBill");
            return true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Error in delete!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    // when user searches for entry
    //call showAllInBillST
    void enterInfo(String s) {
        String s1 = billPCode.getText().trim();
        String s2 = billPName.getText().trim();
        if (s1.isEmpty()) {
            s1 = "";
        }
        if (s2.isEmpty()) {
            s2 = "";
        }

        showAllInBillST(s1, s2, s);
    }

    // actual method to insert data to tables
    void insertIntoTab() {
        String pId, pName;
        DefaultTableModel model2 = (DefaultTableModel) billTable.getModel();

        int row = inStockTab.getSelectedRow();
        int col = inStockTab.getSelectedColumnCount();

        //System.out.println(row+" "+col);
        if (!inStockTab.isRowSelected(row)) {

            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b><i>*select item from table", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            inStockTab.requestFocus();
            inStockTab.changeSelection(0, 1, false, false);

        } else {
            // to check if stock is available or not
            int len;
            pId = (String) inStockTab.getValueAt(row, 0);
            if (pId.contains("<html><b><font color=\"red\">")) {
                len = "<html><b><font color=\"red\">".length();
            } else if (pId.contains("<html><b><font color=\"orange\">")) {
                len = "<html><b><font color=\"orange\">".length();
            } else {
                len = 0;
            }

            pId = pId.substring(len);

            Integer stock = Integer.parseInt(String.valueOf(inStockTab.getValueAt(row, 3)).substring(len));
            if (stock == 0) {
                JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b><i>Product Not Available!", "STOCK OUT", JOptionPane.ERROR_MESSAGE);
            } else {

                int quantity = Integer.parseInt(billQty.getText().trim().isEmpty() ? "0" : billQty.getText().trim());

                if (quantity != 0) {

                    if (quantity <= stock) {

                        float rate = Float.parseFloat(String.valueOf(inStockTab.getValueAt(row, 5)).substring(len));
                        int curRow = billTable.getRowCount();
                        pId = pId;
                        pName = String.valueOf(inStockTab.getValueAt(row, 1)).substring(len);

                        boolean notPres = checkForDup(quantity, pId);

                        if (notPres) {

                            model2.insertRow(curRow, new Object[]{
                                (curRow + 1),
                                pName,
                                quantity,
                                Float.parseFloat(String.format("%.2f", rate)),
                                (Float) Float.parseFloat(String.format("%.2f", rate * quantity))
                            });

                            // insert into tempBill table
                            try {

                                String sq = "insert into tempBill values(?,?,?,?,?)";
                                ps = conn.prepareStatement(sq);
                                ps.setInt(1, (curRow + 1));
                                ps.setString(2, pId);
                                ps.setString(3, pName);
                                ps.setInt(4, quantity);
                                ps.setFloat(5, rate);
                                ps.executeUpdate();

                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Sorry can't insert the product!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
                            } finally {
                                billPCode.setText("");
                                billPName.setText("");
                                billQty.setText("");
                                enterInfo("show all after add");
                                billPName.requestFocus();
                            }
                        }// if notPres     

                    }// if qty<stock
                    else {
                        JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b><i>*Quantity is unavailable!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
                        billQty.requestFocus();
                    }

                    setTotal();  // set total bill amount in aipTTF text field

                } else {
                    JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b><i>*Quantity required", "ERRROR!", JOptionPane.ERROR_MESSAGE);
                    billQty.requestFocus();
                }
            }
        }
    }

    /*
     // above hd
     private void updateTable() {
     try {
     String sqst = "use csmtdb;";
     ps = conn.prepareStatement(sqst);
     ps.executeUpdate();

     sqst = "select * from productinfo;";
     ps = conn.prepareStatement(sqst);
     rs = ps.executeQuery();

     stockTable.setModel(DbUtils.resultSetToTableModel(rs));
     } catch (SQLException e) {
     JOptionPane.showMessageDialog(null, e);
     }
     }
     */
    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        //System.exit(0);
    }//GEN-LAST:event_closeBtnActionPerformed

    //add btn clicked in main menu action
    private void addItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemBtnActionPerformed

        mainMenu.setVisible(false);
        //session=dateNTime.getText().toString().toUpperCase().substring(3, 6);
        //session=session+dateNTime.getText().toString().substring(9, 11);
        //System.out.println("Session:"+session);
        setAddItem();
        addItemTableUpdate("", "show added items");
        addItem.setVisible(true);
        updateBtn.setEnabled(false);
        //Edit stockTable column width--------
        stockTable.setAutoResizeMode(AUTO_RESIZE_OFF);
        stockTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        stockTable.getColumnModel().getColumn(1).setPreferredWidth(300);
        stockTable.getColumnModel().getColumn(2).setPreferredWidth(80);
        stockTable.getColumnModel().getColumn(3).setPreferredWidth(110);
        stockTable.getColumnModel().getColumn(4).setPreferredWidth(110);
        stockTable.getColumnModel().getColumn(5).setPreferredWidth(90);
        stockTable.getColumnModel().getColumn(6).setPreferredWidth(80);
        stockTable.getColumnModel().getColumn(7).setMaxWidth(100);
        stockTable.getColumnModel().getColumn(8).setMinWidth(100);
        stockTable.setAutoResizeMode(AUTO_RESIZE_LAST_COLUMN);
        //-----------------
        pNameTxt.requestFocus();


    }//GEN-LAST:event_addItemBtnActionPerformed

    private void closeBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtn1ActionPerformed
        //System.exit(0);
        addBackBtn.doClick();
    }//GEN-LAST:event_closeBtn1ActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        String pName = pNameTxt.getText().trim();
        int pStock = Integer.parseInt(pQtyTxt.getText().trim().isEmpty() ? "0" : pQtyTxt.getText().trim());
        float pRate = Float.parseFloat(pRateTxt.getText().trim().isEmpty() ? "0" : pRateTxt.getText().trim());
        Date pEntryD = new Date(pEntDateTxt.getDate().getTime());
        Date pExpiryD = new Date(pExpDateTxt.getDate().getTime());
        if (pExpiryD.before(pEntryD)) {
            JOptionPane.showMessageDialog(this, "<html><font color =red><i><b>Invalid Expiry Date!\nExpiry Date can't be before Entry date", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {

            float pProfit = Float.parseFloat(pProTxt.getText().trim().isEmpty() ? "0" : pProTxt.getText().trim());

            String err = "";
            if (pName.isEmpty() || pProfit == 0 || pRate == 0 || pStock == 0 || pEntryD.toString().isEmpty() || pExpiryD.toString().isEmpty()) {
                if (pName.isEmpty()) {
                    err += "<html><font color =red><i><b>Product name is required!\n";
                }
                if (pRate == 0) {
                    err += "<html><font color =red><i><b>Product rate is required!\n";
                }
                if (pStock == 0) {
                    err += "<html><font color =red><i><b>Product stock is required!\n";
                }
                if (pEntryD.toString().isEmpty()) {
                    err += "<html><font color =red><i><b>Product Entry Date is required!\n";
                }
                if (pExpiryD.toString().isEmpty()) {
                    err += "<html><font color =red><i><b>Product Expiry Date is required!\n";
                }
                if (pProfit == 0) {
                    err += "<html><font color =red><i><b>Profit% is required!\n";
                }
                JOptionPane.showMessageDialog(this, err, "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {

                try {

                    /*String sq = "insert into csmtproductinfo values(?,?,?,?,?,?,?)";
                     ps = conn.prepareStatement(sq);
                     ps.setString(1, pId);
                     ps.setString(2, pName);
                     ps.setInt(3, pStock);
                     ps.setFloat(4, pRate);
                     ps.setDate(5, pEntryD);
                     ps.setDate(6, pExpiryD);
                     ps.setFloat(7, pProfit);
                     ps.executeUpdate();
                     System.out.println(ps);*/
                    //update pExpDateTxt on add btn click
                    if (inMonthCB1.isSelected()) {
                        SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");
                        Calendar cd = Calendar.getInstance();
                        cd.setTime(pEntDateTxt.getDate());
                        String mnthText = inMonthTF.getText().toString();
                        cd.add(Calendar.MONTH, Integer.parseInt(mnthText));
                        //JDateChooser dc = new ;
                        pExpDateTxt.setDate(cd.getTime());
                    }
                    //

                    //session update on add item btn click
                    SimpleDateFormat sdf = new SimpleDateFormat("MMM/YY");
                    String sess = sdf.format(pEntDateTxt.getDate()).toUpperCase();
                    session = (sess.substring(0, 3)) + (sess.substring(4, 6));
                    System.out.println("Ent date session:" + session + "   sess:" + sess);
                    //
                    addStockInStockNSale(pName, pStock);
                    setAddItem();
                    addItemTableUpdate("", "after added");

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "<html><font color =red size=4><i><b>Sorry can't insert the product!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
                }

            }
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void updateSaleInStockNSale() {
        int r = billTable.getRowCount();
        int i = 0;

        for (i = 1; i <= r; i++) {
            String pCode = "";
            double purRate = 0.0, sellRate = 0.0;
            int qty = 0, inStock = 0, addStock = 0, sellStock = 0;//System.out.println("billTable rowCount:"+r);

            try {
                String sq = "select pCode,pRate,pQty from tempBill where sNo=" + i + ";";
                ps = conn.prepareStatement(sq);
                rs = ps.executeQuery();
                if (rs.next()) {
                    pCode = rs.getString("pCode");
                    sellRate = Double.parseDouble(rs.getString("pRate"));
                    qty = Integer.parseInt(rs.getString("pQty"));
                }

                sq = "select addStock,sellStock from stocknsale where session='" + session + "' and pCode='" + pCode + "';";
                ps = conn.prepareStatement(sq);
                rs = ps.executeQuery();
                if (rs.next()) {

                    String sqs = "select pStock from csmtproductinfo where pCode='" + pCode + "';";
                    ps = conn.prepareStatement(sqs);
                    ResultSet tem = ps.executeQuery();
                    if (tem.next()) {
                        inStock = Integer.parseInt(tem.getString("pStock"));
                    }
                    addStock = Integer.parseInt(rs.getString("addStock"));
                    sellStock = Integer.parseInt(rs.getString("sellStock"));
                }

                sq = "select pRate from csmtproductinfo where pCode='" + pCode + "';";
                ps = conn.prepareStatement(sq);
                rs = ps.executeQuery();
                if (rs.next()) {
                    purRate = Double.parseDouble(rs.getString("pRate"));
                }
                inStock -= qty;
                sellStock += qty;
                System.out.println("looking in stocknsale session:" + session);
                sq = "select * from stocknsale where session='" + session + "' and pCode='" + pCode + "';";
                ps = conn.prepareStatement(sq);
                rs = ps.executeQuery();

                if (rs.next()) {
                    //sq="insert into stocknsale value('"+session+"','"+pCode+"',"+inStock+","+addStock+","+sellStock+","+purRate+","+sellRate+");";
                    sq = "update stocknsale set sellStock=" + sellStock + ",purRate=" + purRate + ",sellRate=" + sellRate + " where session='" + session + "'and pCode='" + pCode + "';";
                    ps = conn.prepareStatement(sq);
                    ps.executeUpdate();
                } else {
                    sq = "insert into stocknsale value('" + session + "','" + pCode + "'," + addStock + "," + sellStock + "," + purRate + "," + sellRate + ");";
                    ps = conn.prepareStatement(sq);
                    ps.executeUpdate();
                }

            } catch (SQLException se) {
                JOptionPane.showMessageDialog(null, "Error! in updating stockNsale\n" + se);
            }

        }
    }

    private void addStockInStockNSale(String pName, int pStock) {
        try {
            String sq = "select * from csmtproductinfo where pName='" + pName + "';";
            ps = conn.prepareStatement(sq);
            rs = ps.executeQuery(sq);

            if (rs.next()) {

                int tem = JOptionPane.showConfirmDialog(null, "Add stock to the existing product stock?");
                if (tem == JOptionPane.YES_OPTION) {
                    int stock = 0;
                    String pId = "";
                    sq = "select pStock,pCode from csmtproductinfo where pName='" + pName + "';";
                    ps = conn.prepareStatement(sq);
                    rs = ps.executeQuery();
                    if (rs.next()) {
                        stock = Integer.parseInt(rs.getString("pStock"));
                        pId = rs.getString("pCode");
                    }
                    stock += pStock;
                    //stock += Integer.parseInt(pQtyTxt.getText().trim());                    

                    sq = "update csmtproductinfo set pStock=" + stock + " where pName='" + pName + "';";
                    ps = conn.prepareStatement(sq);
                    ps.executeUpdate();

                    int inStock = 0, addStock = 0;
                    //sq = "select * from stocknsale where session='" + session + "' and pCode='" + pId + "';";
                    sq = "select addstock from stocknsale where session='" + session + "' and pCode='" + pId + "';";
                    ps = conn.prepareStatement(sq);
                    rs = ps.executeQuery(sq);
                    System.out.println("session:" + session + " -  pId:" + pId);
                    if (rs.next()) {

                        String sqs = "select pStock from csmtproductinfo where pCode='" + pId + "';";
                        ps = conn.prepareStatement(sqs);
                        ResultSet temp = ps.executeQuery();
                        if (temp.next()) {
                            inStock = Integer.parseInt(temp.getString("pStock"));
                        }

                        addStock = Integer.parseInt(rs.getString("addStock"));
                    }
                    System.out.println("inStock:" + inStock + "   addStock:" + addStock + "   ptosck:" + pStock);
                    inStock += pStock;
                    addStock += pStock;
                    sq = "update stocknsale set addStock=" + addStock + " where session='" + session + "' and pCode='" + pId + "';";
                    ps = conn.prepareStatement(sq);
                    ps.executeUpdate();
                } else {
                    JOptionPane.showMessageDialog(null, "Then update the existing product.");
                }

            } else {

                sq = "select count(pCode) as pc from csmtproductinfo;";
                ps = conn.prepareStatement(sq);
                rs = ps.executeQuery();
                rs.next();

                String prId = rs.getString("pc");
                String prName = pNameTxt.getText().trim();

                int prStock = Integer.parseInt(pQtyTxt.getText().trim().isEmpty() ? "0" : pQtyTxt.getText().trim());
                float prRate = Float.parseFloat(pRateTxt.getText().trim().isEmpty() ? "0" : pRateTxt.getText().trim());
                Date prEntryD = new Date(pEntDateTxt.getDate().getTime());
                Date prExpiryD = new Date(pExpDateTxt.getDate().getTime());
                float prProfit = Float.parseFloat(pProTxt.getText().trim().isEmpty() ? "0" : pProTxt.getText().trim());
                try {
                    sq = "insert into csmtproductinfo values(?,?,?,?,?,?,?)";
                    ps = conn.prepareStatement(sq);
                    ps.setString(1, prId);
                    ps.setString(2, prName);
                    ps.setInt(3, prStock);
                    ps.setFloat(4, prRate);
                    ps.setDate(5, prEntryD);
                    ps.setDate(6, prExpiryD);
                    ps.setFloat(7, prProfit);
                    ps.executeUpdate();

                    double purRate, profit;
                    String pId;
                    try {
                        sq = "select pCode,pRate, pProfit from csmtproductinfo where pCode='" + prId + "';";
                        ps = conn.prepareStatement(sq);
                        rs = ps.executeQuery();
                        if (rs.next()) {
                            purRate = Double.parseDouble(rs.getString("pRate"));
                            profit = Double.parseDouble(rs.getString("pProfit"));
                            pId = rs.getString("pCode");
                            //System.out.println("pCode:"+pId+" pur rate:"+purRate+" profit:"+profit);//delete
                        } else {
                            purRate = 0.0;
                            profit = 0.0;
                            pId = "";
                        }
                        double sellRate = purRate + (purRate * (profit / 100));
                        //System.out.println("pCode:"+pId+" pur rate:"+purRate+" profit:"+profit+"-"+pStock);//delete
                        sq = "insert into stocknsale value('" + session + "','" + pId + "'," + pStock + ",0.000," + purRate + "," + sellRate + ");";
                        ps = conn.prepareStatement(sq);
                        ps.executeUpdate();
                        System.out.println(sq);
                    } catch (SQLException se) {
                        JOptionPane.showMessageDialog(null, se);
                    }
                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "can not add to csmtproductinfo and stocknsale\n" + se);
                }
            }
        } catch (SQLException se) {
            JOptionPane.showMessageDialog(null, "Error! in updating stocknsale and csmtproductinfo for pid:" + pName);
        }
    }

    private void updateStockInStockNSale(String pId, int pStock) {
        try {
            String sq = "select * from stocknsale where session='" + session + "' and pCode='" + pId + "';";
            ps = conn.prepareStatement(sq);
            rs = ps.executeQuery(sq);

            if (rs.next()) {
                int inStock = 0, addStock = 0;
                /*
                 SimpleDateFormat sdf = new SimpleDateFormat("MMM/YY");
                 String sess=sdf.format(pEntDateTxt.getDate()).toUpperCase();
                 session=(sess.substring(0, 3))+(sess.substring(4,6));
                 System.out.println("Ent date session:"+session+"   sess:"+sess);
                 */
                sq = "select addstock from stocknsale where session='" + session + "' and pCode='" + pId + "';";
                ps = conn.prepareStatement(sq);
                rs = ps.executeQuery();
                if (rs.next()) {
                    String sqs = "select pStock from csmtproductinfo where pCode='" + pId + "';";
                    ps = conn.prepareStatement(sqs);
                    ResultSet tem = ps.executeQuery();
                    if (tem.next()) {
                        inStock = Integer.parseInt(tem.getString("pStock"));
                    }
                    addStock = Integer.parseInt(rs.getString("addStock"));
                }

                addStock += Integer.parseInt(pQtyTxt.getText().trim());
                inStock += Integer.parseInt(pQtyTxt.getText().trim());

                sq = "update stocknsale set addStock=" + addStock + " where session='" + session + "' and pCode='" + pId + "';";
                ps = conn.prepareStatement(sq);
                ps.executeUpdate();

            } else {
                double purRate, profit;
                try {
                    sq = "select pRate, pProfit from csmtproductinfo where pCode='" + pId + "';";
                    ps = conn.prepareStatement(sq);
                    rs = ps.executeQuery();
                    if (rs.next()) {
                        purRate = Double.parseDouble(rs.getString("pRate"));
                        profit = Double.parseDouble(rs.getString("pProfit"));
                    } else {
                        purRate = 0.0;
                        profit = 0.0;
                    }
                    double sellRate = purRate + (purRate * (profit / 100));

                    /*Session updation
                     SimpleDateFormat sdf = new SimpleDateFormat("MMM/YY");
                     String sess=sdf.format(pEntDateTxt.getDate()).toUpperCase();
                     session=(sess.substring(0, 3))+(sess.substring(4,6));
                     System.out.println("Ent date session:"+session+"   sess:"+sess);
                     //------------*/
                    sq = "insert into stocknsale value('" + session + "','" + pId + "'," + pStock + ",0.000," + purRate + "," + sellRate + ");";
                    ps = conn.prepareStatement(sq);
                    ps.executeUpdate();
                    System.out.println(sq);
                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, se);
                }
            }
        } catch (SQLException se) {
            JOptionPane.showMessageDialog(null, "Error! in updating stocknsale for pid:" + pId);
        }
    }

    private void addBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBackBtnActionPerformed
        addItem.setVisible(false);
        menuPanel.setVisible(true);

    }//GEN-LAST:event_addBackBtnActionPerformed

    private void closeBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtn2ActionPerformed

        clearTempBill();
        billBackBtn.doClick();
    }//GEN-LAST:event_closeBtn2ActionPerformed

    //to disable back add item panel during update pop
    private void setAddPanelEnabled(JPanel panel, boolean isEnabled) {
        panel.setEnabled(isEnabled);
        Component[] components = panel.getComponents();

        for (int i = 0; i < components.length; i++) {
            if (components[i].getClass().getName() == "javax.swing.JPanel") {
                setAddPanelEnabled((JPanel) components[i], isEnabled);
            }

            components[i].setEnabled(isEnabled);
        }
    }

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed

        pop.setLocationRelativeTo(sf);
        setAddPanelEnabled(addItem, false);
        stockTable.setEnabled(false);
        pop.setVisible(true);
        inMonthCB2.setSelected(true);
        inMonthTF2.setEnabled(true);
        inMonthTF2.setText("0");
        popExpDate.setEnabled(false);
        //fg;
        //updatePopup.setLocationRelativeTo(CENTER_ALIGNMENT);

        /* int p = JOptionPane.showConfirmDialog(null, "Confirm the item update for PCode:" + updatePCode, "Update", JOptionPane.YES_NO_OPTION);
         if (p == JOptionPane.YES_OPTION) {
         String prodName, prodCode;
         Date entDate, expDate;
         int prodQty;
         double rate, profit, cost;
         float amount;

         //Values assignment
         prodCode = updatePCode;
         prodName = String.valueOf(pNameTxt.getText());
         prodQty = Integer.valueOf(String.valueOf(pQtyTxt.getText()));
         entDate = new Date(pEntDateTxt.getDate().getTime());
         expDate = new Date(pExpDateTxt.getDate().getTime());
         rate = Double.valueOf(String.valueOf(pRateTxt.getText()));
         profit = Double.valueOf(String.valueOf(pProTxt.getText()));
         cost = rate + ((profit / 100) * rate);
         amount = (float) (prodQty * cost);

         if (prodCode.isEmpty() || prodName.isEmpty() || entDate.toString().isEmpty() || expDate.toString().isEmpty() || prodQty == 0 || rate == 0 || profit == 0) {
         JOptionPane.showMessageDialog(null, "Please provide complete details");
         } else {

         try {
         //String sqlst="insert into productinfo values('"+prodCode+"','"+prodName+"',"+prodQty+",'"+entDate+"','"
         // +expDate+"',"+rate+","+profit+","+cost+","+amount+");";
         String sqlst = "update productInfo set pName='" + prodName + "',stock=" + prodQty + ",EntDate='" + entDate + "',"
         + "ExpDate='" + expDate + "',Rate=" + rate + ",ProfPercent=" + profit + ",Cost=" + cost + ",Amount=" + amount + ""
         + "  where PCode='" + prodCode + "';";
         System.out.println("Updating item entry from add panel\nQuery:" + sqlst);
         ps = conn.prepareStatement(sqlst);
         ps.executeUpdate();
         System.out.println("Entry query added");

         // updateTable();
         } catch (SQLException e) {
         JOptionPane.showMessageDialog(null, "Can not update enry! Right Now");
         }
         }
         }
         updatePCode = "";*/
    }//GEN-LAST:event_updateBtnActionPerformed

    private void billingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billingBtnActionPerformed
        mainMenu.setVisible(false);

        setT(); // calling set method to set enter key event
        clearTempBill();
        setBillNo();
        inStockTab.getTableHeader().setReorderingAllowed(false);
        billTable.getTableHeader().setReorderingAllowed(false);
        billGross.setHorizontalAlignment(JTextField.RIGHT);
        billGross.setText(String.valueOf("0.0 " + RUPEE));
        showAllInBillST("", "", "SHOW ALL FIRST");

        billPCode.setText("");
        billPName.setText("");

        //addBtnCnt = 0;
        //bGross = 0;
        //  updateTable();
        billing.setVisible(true);
        //edits update table column width-----------------
        billTable.setAutoResizeMode(AUTO_RESIZE_OFF);
        billTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        billTable.getColumnModel().getColumn(1).setPreferredWidth(250);
        billTable.getColumnModel().getColumn(2).setPreferredWidth(80);
        billTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        billTable.getColumnModel().getColumn(4).setMaxWidth(100);
        billTable.setAutoResizeMode(AUTO_RESIZE_LAST_COLUMN);
        //----------------------------------

        //Edits inStock table aolumn width-----------------------
        inStockTab.setAutoResizeMode(AUTO_RESIZE_LAST_COLUMN);
        inStockTab.getColumnModel().getColumn(0).setPreferredWidth(80);
        inStockTab.getColumnModel().getColumn(1).setPreferredWidth(250);
        inStockTab.getColumnModel().getColumn(2).setPreferredWidth(100);
        inStockTab.getColumnModel().getColumn(3).setPreferredWidth(80);
        inStockTab.getColumnModel().getColumn(4).setMaxWidth(100);
        inStockTab.getColumnModel().getColumn(5).setMinWidth(80);
        inStockTab.setAutoResizeMode(AUTO_RESIZE_LAST_COLUMN);
        //-------------------
        billPName.requestFocus();
    }//GEN-LAST:event_billingBtnActionPerformed

    private void exitApplicationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitApplicationBtnActionPerformed

        System.exit(0);
    }//GEN-LAST:event_exitApplicationBtnActionPerformed

    private void billBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billBackBtnActionPerformed

        billing.setVisible(false);
        setGraph();
        mainMenu.setVisible(true);

        DefaultTableModel tm = (DefaultTableModel) billTable.getModel();
        tm.setRowCount(0);

        clearTempBill();
    }//GEN-LAST:event_billBackBtnActionPerformed

    private void addBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBillBtnActionPerformed

        insertIntoTab();

    }//GEN-LAST:event_addBillBtnActionPerformed

    private void pNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pNameTxtActionPerformed

    private void billPCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billPCodeKeyTyped
    }//GEN-LAST:event_billPCodeKeyTyped

    private void pQtyTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pQtyTxtKeyTyped
        if (!(Character.isDigit(evt.getKeyChar()))) {
            evt.consume();
        }
    }//GEN-LAST:event_pQtyTxtKeyTyped

    private void pProTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pProTxtKeyTyped
        if (!(Character.isDigit(evt.getKeyChar()) || evt.getKeyChar() == '.')) {
            evt.consume();
        }
    }//GEN-LAST:event_pProTxtKeyTyped

    private void pRateTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pRateTxtKeyTyped
        if (!(Character.isDigit(evt.getKeyChar()) || evt.getKeyChar() == '.')) {
            evt.consume();
        }
    }//GEN-LAST:event_pRateTxtKeyTyped

    private void billPNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billPNameKeyTyped
    }//GEN-LAST:event_billPNameKeyTyped

    private void inStockTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inStockTabMouseClicked

        if (evt.getButton() == MouseEvent.BUTTON1) {
            if (evt.getClickCount() == 2) {
                updatePCODE_PNAME();
                billQty.requestFocusInWindow();

            }
        }

    }//GEN-LAST:event_inStockTabMouseClicked

    private void billPNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billPNameKeyReleased

        /* String s1 = billPCode.getText().trim();
         String s2 = billPName.getText().trim();
         if (s1.isEmpty()) {
         s1 = "";
         }
         if (s2.isEmpty()) {
         s2 = "";
         }

         showAllInBillST(s1, s2, "Product NAME");*/
        enterInfo("Product NAME");

        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            inStockTab.requestFocus();
            inStockTab.changeSelection(0, 1, false, false);
            updatePCODE_PNAME();
        }
    }//GEN-LAST:event_billPNameKeyReleased

    private void billPCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billPCodeKeyReleased
        /*String s1 = billPCode.getText().trim();
         String s2 = billPName.getText().trim();
         if (s1.isEmpty()) {
         s1 = "";
         }
         if (s2.isEmpty()) {
         s2 = "";
         }

         showAllInBillST(s1, s2, "Product ID");*/
        enterInfo("Product ID");

        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            inStockTab.requestFocus();
            inStockTab.changeSelection(0, 1, false, false);
        }
    }//GEN-LAST:event_billPCodeKeyReleased

    private void stockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockTableMouseClicked
        int r = stockTable.getSelectedRow();
        if (evt.getButton() == MouseEvent.BUTTON1) {

            String pCode = (String) stockTable.getValueAt(r, 0);

            if (pCode.contains("<html><b><font color=\"red\">")) {
                pCode = pCode.substring("<html><b><font color=\"red\">".length());
                String pName, pQty, pRate, pPro;
                pName = String.valueOf(stockTable.getValueAt(r, 1)).substring("<html><b><font color=\"red\">".length());
                pQty = String.valueOf(stockTable.getValueAt(r, 2)).substring("<html><b><font color=\"red\">".length());
                pRate = String.valueOf(stockTable.getValueAt(r, 5)).substring("<html><b><font color=\"red\">".length());
                pPro = String.valueOf(stockTable.getValueAt(r, 7)).substring("<html><b><font color=\"red\">".length());
                pNameTxt.setText(pName);
                pQtyTxt.setText(pQty);
                pRateTxt.setText(pRate);
                pProTxt.setText(pPro);
                try {
                    java.util.Date enDate, exDate;
                    SimpleDateFormat tt = new SimpleDateFormat("dd-MMM-yyyy");

                    enDate = tt.parse(((String) (stockTable.getValueAt(r, 3))).substring("<html><b><font color=\"red\">".length()));
                    exDate = tt.parse(((String) (stockTable.getValueAt(r, 4))).substring("<html><b><font color=\"red\">".length()));
                    //System.out.println(" Entdate:" + enDate + "\nexDate:" + exDate);
                    pEntDateTxt.setDate(enDate);
                    pExpDateTxt.setDate(exDate);
                    setPop(pCode, pName, pQty, pRate, pPro, enDate, exDate);
                    updateBtn.setEnabled(true);
                } catch (Exception e) {
                    //System.out.println("Unable to fetch the date format in add table");
                }
            } else if (pCode.contains("<html><b><font color=\"orange\">")) {
                pCode = pCode.substring("<html><b><font color=\"orange\">".length());
                String pName, pQty, pRate, pPro;
                pName = String.valueOf(stockTable.getValueAt(r, 1)).substring("<html><b><font color=\"orange\">".length());
                pQty = String.valueOf(stockTable.getValueAt(r, 2)).substring("<html><b><font color=\"orange\">".length());
                pRate = String.valueOf(stockTable.getValueAt(r, 5)).substring("<html><b><font color=\"orange\">".length());
                pPro = String.valueOf(stockTable.getValueAt(r, 7)).substring("<html><b><font color=\"orange\">".length());
                pNameTxt.setText(pName);
                pQtyTxt.setText(pQty);
                pRateTxt.setText(pRate);
                pProTxt.setText(pPro);
                try {
                    java.util.Date enDate, exDate;
                    SimpleDateFormat tt = new SimpleDateFormat("dd-MMM-yyyy");

                    enDate = tt.parse(((String) (stockTable.getValueAt(r, 3))).substring("<html><b><font color=\"orange\">".length()));
                    exDate = tt.parse(((String) (stockTable.getValueAt(r, 4))).substring("<html><b><font color=\"orange\">".length()));
                    //System.out.println(" Entdate:" + enDate + "\nexDate:" + exDate);
                    pEntDateTxt.setDate(enDate);
                    pExpDateTxt.setDate(exDate);
                    setPop(pCode, pName, pQty, pRate, pPro, enDate, exDate);
                    updateBtn.setEnabled(true);
                } catch (Exception e) {
                    //System.out.println("Unable to fetch the date format in add table");
                }
            } else {
                pCode = pCode;
                String pName, pQty, pRate, pPro;
                pName = String.valueOf(stockTable.getValueAt(r, 1));
                pQty = String.valueOf(stockTable.getValueAt(r, 2));
                pRate = String.valueOf(stockTable.getValueAt(r, 5));
                pPro = String.valueOf(stockTable.getValueAt(r, 7));
                pNameTxt.setText(pName);
                pQtyTxt.setText(pQty);
                pRateTxt.setText(pRate);
                pProTxt.setText(pPro);
                try {
                    java.util.Date enDate, exDate;
                    SimpleDateFormat tt = new SimpleDateFormat("dd-MMM-yyyy");

                    enDate = tt.parse(((String) (stockTable.getValueAt(r, 3))));
                    exDate = tt.parse(((String) (stockTable.getValueAt(r, 4))));
                    //System.out.println(" Entdate:" + enDate + "\nexDate:" + exDate);
                    pEntDateTxt.setDate(enDate);
                    pExpDateTxt.setDate(exDate);
                    setPop(pCode, pName, pQty, pRate, pPro, enDate, exDate);
                    updateBtn.setEnabled(true);
                } catch (Exception e) {
                    //System.out.println("Unable to fetch the date format in add table");
                }
            }
        }// if mouse button == 1
    }//GEN-LAST:event_stockTableMouseClicked

    private void inStockTabKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inStockTabKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
            pressUpDownInTable();
        }
    }//GEN-LAST:event_inStockTabKeyReleased

    private void billPCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billPCodeKeyPressed
    }//GEN-LAST:event_billPCodeKeyPressed

    private void billQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billQtyActionPerformed
        addBillBtn.doClick();
    }//GEN-LAST:event_billQtyActionPerformed

    private void billPNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billPNameKeyPressed
    }//GEN-LAST:event_billPNameKeyPressed

    private void billQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billQtyKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
            inStockTab.requestFocus();
            inStockTab.changeSelection(0, 1, false, false);
            updatePCODE_PNAME();
        }
    }//GEN-LAST:event_billQtyKeyReleased

    private void billPNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billPNameMouseClicked
        String pp = billPName.getText();
        if (!pp.isEmpty()) {
            billPName.selectAll();
        }
    }//GEN-LAST:event_billPNameMouseClicked

    private void billPCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billPCodeMouseClicked
        String pp = billPCode.getText();
        if (!pp.isEmpty()) {
            billPCode.selectAll();
        }
    }//GEN-LAST:event_billPCodeMouseClicked

    private void addBillBtnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addBillBtnKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_addBillBtnKeyPressed

    private void addBillBtnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addBillBtnKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addBillBtn.doClick();
        }
    }//GEN-LAST:event_addBillBtnKeyReleased

    private void addItemBtnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addItemBtnKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addItemBtn.doClick();
        }
    }//GEN-LAST:event_addItemBtnKeyReleased

    private void billingBtnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billingBtnKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            billingBtn.doClick();
        }
    }//GEN-LAST:event_billingBtnKeyReleased

    private void saleRecordBtnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saleRecordBtnKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saleRecordBtn.doClick();
        }
    }//GEN-LAST:event_saleRecordBtnKeyReleased

    private void stockRecordUpdate(String code, String name) {
        try {
            /*String sqst = "select pCode,purRate from stockNsale where session='" + session + "' and pCode like '%" + code + "%' and"
                    + " pCode IN (select pCode from csmtproductinfo where pName like '%" + name + "%');";*/
            String sqst = "select pCode,purRate from stockNsale where session='" + session + "' and pCode like '%" + code + "%' and"
                    + " pCode IN (select pCode from csmtproductinfo where pName like '%" + name + "%');";
            ps = conn.prepareStatement(sqst);
            rs = ps.executeQuery();

            DefaultTableModel tm = (DefaultTableModel) stockStatTab.getModel();
            tm.setRowCount(0);
            //SimpleDateFormat sdft = new SimpleDateFormat("dd-MMM-yyyy");
            int sNo = 0;
            while (rs.next()) {
                sNo++;
                String pCode = rs.getString("pCode");
                sqst = "select pName from csmtproductinfo where pCode like '%" + pCode + "%' and pName like '%" + name + "%';";
                ps = conn.prepareStatement(sqst);
                ResultSet tem = null;
                tem = ps.executeQuery();
                String pName = "";
                if (tem.next()) {
                    pName = tem.getString("pName");
                }
                tem = null;
                //String pName = rs.getString("pName");
                sqst = "select addStock,sellStock from stockNsale where session='" + session + "' and pCode like '%" + pCode + "%' ;";
                ps = conn.prepareStatement(sqst);
                tem = ps.executeQuery();
                int addStock = 0, soldStock = 0;
                if (tem.next()) {
                    addStock = tem.getInt("addStock");
                    soldStock = tem.getInt("sellStock");
                }
                float rate = rs.getFloat("purRate");

                tm.addRow(new Object[]{
                    (Integer) sNo,
                    (String) pCode,
                    (String) pName,
                    (Integer) addStock,
                    (Integer) soldStock,
                    (Float) Float.parseFloat(String.format("%.2f", rate))});

            }
        } catch (SQLException se) {
            JOptionPane.showMessageDialog(null, "Error! updating stock table\n" + se);
        }
    }

    private void stockStatusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockStatusBtnActionPerformed

        stockRecordUpdate("", "");
        mainMenu.setVisible(false);
        stockStatus.setVisible(true);
        monthCB.requestFocus();

        Calendar cc = Calendar.getInstance();

        SimpleDateFormat sdf1 = new SimpleDateFormat("MM");
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy");
        String mm = sdf1.format(cc.getTime());
        String yy = sdf2.format(cc.getTime());

        monthCB.setSelectedIndex(Integer.parseInt(mm) - 1);
        yearCB.setSelectedIndex(Integer.parseInt(yy) - 2015);

        //----------------------------
        stockStatTab.setAutoResizeMode(AUTO_RESIZE_OFF);
        stockStatTab.getColumnModel().getColumn(0).setPreferredWidth(50);
        stockStatTab.getColumnModel().getColumn(1).setPreferredWidth(80);
        stockStatTab.getColumnModel().getColumn(2).setPreferredWidth(300);
        stockStatTab.getColumnModel().getColumn(3).setMinWidth(100);
        stockStatTab.getColumnModel().getColumn(4).setMinWidth(100);
        stockStatTab.getColumnModel().getColumn(5).setMinWidth(100);
        stockStatTab.setAutoResizeMode(AUTO_RESIZE_LAST_COLUMN);
        //----------------------------

        stockRecordApplyBtn.doClick();
    }//GEN-LAST:event_stockStatusBtnActionPerformed

    private void billCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billCancelBtnActionPerformed
        returnBillBtn.setEnabled(false);
        returnEntireCB.setEnabled(false);
        billCancel.setVisible(true);
        mainMenu.setVisible(false);
        billNoTxt.requestFocus();
        //----------------------------------------------------
        billNoContentTab.setAutoResizeMode(AUTO_RESIZE_OFF);
        billNoContentTab.getColumnModel().getColumn(0).setPreferredWidth(50);
        billNoContentTab.getColumnModel().getColumn(1).setPreferredWidth(150);
        billNoContentTab.getColumnModel().getColumn(2).setPreferredWidth(250);
        billNoContentTab.getColumnModel().getColumn(3).setPreferredWidth(150);
        billNoContentTab.getColumnModel().getColumn(4).setPreferredWidth(150);
        billNoContentTab.getColumnModel().getColumn(5).setPreferredWidth(150);
        billNoContentTab.setAutoResizeMode(AUTO_RESIZE_LAST_COLUMN);
        //----------------------------------------
    }//GEN-LAST:event_billCancelBtnActionPerformed

    void setSaleTable() {
        DefaultTableModel dst = (DefaultTableModel) daySaleTab.getModel();
        dst.setRowCount(0);
        int rc = 0;
        try {
            Calendar cc = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date curDate = cc.getTime();

            System.out.println(sdf.format(curDate));

            String sq = "select billCode from csmtbill where billGenDate='" + sdf.format(curDate) + "';";
            ps = conn.prepareStatement(sq);
            rs = ps.executeQuery();
            int inStock = 0, qty = 0;
            rc = 0;
            double purate = 0.0, serate = 0.0, amt = 0.0, profit = 0.0;
            while (rs.next()) {
                String bNo = rs.getString("billCode");
                //System.out.println("Bill No:"+bNo+"   row count(no of bill):"+rc);//delete
                //rc++;
                try {
                    String sqt = "select pCode,pName,pQty,pRate from billInfo where billCode='" + bNo + "';";
                    ps = conn.prepareStatement(sqt);
                    ResultSet rst;
                    rst = ps.executeQuery();
                    while (rst.next()) {
                        String description = rst.getString("pName");
                        String pCode = rst.getString("pCode");
                        qty = Integer.parseInt(rst.getString("pQty"));
                        serate = Double.parseDouble(rst.getString("pRate"));
                        //System.out.println("Description:"+description+"   pCode:"+pCode+"   pQty:"+qty+"   pRate:"+serate);//delete
                        try {
                            sqt = "select pStock,pRate from csmtproductinfo where pCode='" + pCode + "';";
                            ps = conn.prepareStatement(sqt);
                            ResultSet rset;
                            rset = ps.executeQuery();
                            rset.next();
                            inStock = Integer.parseInt(rset.getString("pStock"));
                            purate = Double.parseDouble(rset.getString("prate"));
                            //System.out.println("Description:"+description+"   pStock:"+inStock+"   purate:"+purate);//delete
                            int i;
                            boolean dup = false;
                            System.out.println("rc:" + rc + "   dup:" + dup);
                            for (i = 1; i <= rc; i++) {
                                String tname = daySaleTab.getValueAt(i - 1, 1).toString();
                                System.out.println(i + ":name:" + tname);
                                if (tname.equals(description)) {//System.out.println("dup entry found, @ "+i+":name:"+tname+": description:"+description);
                                    dup = true;
                                    break;
                                }
                            }
                            if (dup == true) {//System.out.println("setting dup @ "+i+": description:"+description);
                                int tqty = Integer.parseInt(daySaleTab.getValueAt(i - 1, 3).toString());
                                tqty += qty;
                                daySaleTab.setValueAt(tqty, i - 1, 3);

                                amt = (double) (tqty) * serate;
                                profit = (double) amt - ((double) tqty * purate);

                                daySaleTab.setValueAt(String.format("%.2f", amt), i - 1, 5);//System.out.println("Dup tqty:"+tqty+"     amt"+amt+"   profit:"+profit);
                                daySaleTab.setValueAt(String.format("%.2f", profit), i - 1, 6);
                                //rc--;
                            } else {
                                amt = (double) (qty) * serate;
                                profit = (double) amt - ((double) qty * purate);
                                //System.out.println(" tqty:"+qty+"   amt"+amt+"   profit:"+profit);
                                dst.addRow(new Object[]{
                                    (Integer) rc,
                                    (String) description,
                                    (Integer) inStock,
                                    (Integer) qty,
                                    (Float) Float.parseFloat(String.format("%.2f", serate)),
                                    (Float) Float.parseFloat(String.format("%.2f", amt)),
                                    (Float) Float.parseFloat(String.format("%.2f", profit)),});
                                rc++;
                            }
                        } catch (SQLException se) {
                            JOptionPane.showMessageDialog(null, "Error! searching in csmtproductinfo\n" + se);
                        }
                    }

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "Error! searching in billCode\n" + se);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "date parsing exception\n" + ex);
        }

        System.out.println(rc);
        int i;
        double ta = 0.0, tp = 0.0, tc = 0.0;
        for (i = 0; i < rc; i++) {
            ta += Double.parseDouble(daySaleTab.getValueAt(i, 5).toString());
            tp += Double.parseDouble(daySaleTab.getValueAt(i, 6).toString());
        }
        tSaleCost.setText(String.format("%.2f", ta - tp));
        tSaleAmt.setText(String.format("%.2f", ta));
        tProfit.setText(String.format("%.2f", tp));
        noOfItem.setText(String.valueOf(rc));
    }

    private void grossProfitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grossProfitBtnActionPerformed
        setSaleTable();
        todaySale.setVisible(true);
        mainMenu.setVisible(false);
        //---------------------------------------------------
        daySaleTab.setAutoResizeMode(AUTO_RESIZE_OFF);
        daySaleTab.getColumnModel().getColumn(0).setPreferredWidth(50);
        daySaleTab.getColumnModel().getColumn(1).setPreferredWidth(350);
        daySaleTab.getColumnModel().getColumn(2).setPreferredWidth(100);
        daySaleTab.getColumnModel().getColumn(3).setPreferredWidth(100);
        daySaleTab.getColumnModel().getColumn(4).setMinWidth(100);
        daySaleTab.getColumnModel().getColumn(5).setMinWidth(100);
        daySaleTab.getColumnModel().getColumn(6).setMinWidth(100);
        daySaleTab.setAutoResizeMode(AUTO_RESIZE_LAST_COLUMN);
        //----------------------------------------------------
    }//GEN-LAST:event_grossProfitBtnActionPerformed

    private void stockStatusBtnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stockStatusBtnKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            stockStatusBtn.doClick();
        }
    }//GEN-LAST:event_stockStatusBtnKeyReleased

    private void billCancelBtnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billCancelBtnKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            billCancelBtn.doClick();
        }
    }//GEN-LAST:event_billCancelBtnKeyReleased

    private void grossProfitBtnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grossProfitBtnKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            grossProfitBtn.doClick();
        }
    }//GEN-LAST:event_grossProfitBtnKeyReleased

    private void exitApplicationBtnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_exitApplicationBtnKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exitApplicationBtn.doClick();
        }
    }//GEN-LAST:event_exitApplicationBtnKeyReleased

    // dummy method for testing dont include
    public ArrayList<String> extractbillTableInfo() {

        DefaultTableModel model = (DefaultTableModel) billTable.getModel();

        int nRow = model.getRowCount(), nCol = model.getColumnCount();

        ArrayList<String> extractedInfo = new ArrayList<String>();

        String rowInfo = "";

        for (int i = 0; i < nRow; i++) {
            rowInfo = "";
            for (int j = 0; j < nCol; j++) {
                if (j == 0) {
                    rowInfo = rowInfo + String.format(" |%-4s", String.valueOf(model.getValueAt(i, j)));
                } else if (j == 1) {
                    rowInfo = rowInfo + String.format("|%-15s", String.valueOf(model.getValueAt(i, j)).length() > 14 ? String.valueOf(model.getValueAt(i, j)).substring(0, 15) : String.valueOf(model.getValueAt(i, j)));
                } else if (j == 2) {
                    rowInfo = rowInfo + String.format("|%-6s", String.valueOf(model.getValueAt(i, j)));
                } else if (j == 3) {
                    rowInfo = rowInfo + String.format("|%-8s", String.valueOf(model.getValueAt(i, j)));
                } else if (j == 4) {
                    rowInfo = rowInfo + String.format("|%-8s |", String.valueOf(model.getValueAt(i, j)));
                }
            }
            extractedInfo.add(rowInfo);
        }

        return extractedInfo;
    }

    // tan tan
    public boolean callBill() {

        JTextArea billInfo = new JTextArea();
        ArrayList<String> TableInformation = new ArrayList<>();
        billInfo.setFont(new Font("Serif", Font.CENTER_BASELINE, 15));
        billInfo.append(String.format("%33s\n%41s\n %s\n", "CPC CSMT CANTEEN", "BSF ACADEMY TAKENPUR-475005",LocalDate.now()));
        billInfo.append(" " + billNo.getText() + "\n\n");
        billInfo.append(" CUSTOMER NAME : " + cname.getText() + "\n UNIT : " + cunit.getText() + "\n\n");
        billInfo.setFont(new Font("monospaced", Font.BOLD, 10));
        billInfo.append(String.format(" %-50s\n", "------------------------------------------------")); //48-----
        billInfo.append(String.format(" |%-4s|%-15s|%-6s|%-8s|%-8s |\n", "SNO", "PRODUCT NAME", "QTY.", "RATE", "AMOUNT"));
        billInfo.append(String.format(" %-50s\n", "------------------------------------------------"));
        ArrayList<String> extractedInfo = extractbillTableInfo();

        for (String extractedInfo1 : extractedInfo) {
            TableInformation.add(extractedInfo1);
        }

        for (String TableInformation1 : TableInformation) {
            billInfo.append(TableInformation1 + "\n");
        }
        billInfo.append(String.format(" %-50s", "------------------------------------------------"));
        billInfo.append(String.format("\n |%37s%-8s | \n", "Total Amount : ", billGross.getText()));
        billInfo.append(String.format(" %-50s\n", "------------------------------------------------"));
        /// billInfo.append(String.format("\n%"+billInfo.getColumns()+"s","*****************************************"));
        try {

            if (billInfo.print()) {
                return true;
            }

        } catch (PrinterException ex) {
            System.out.println("ERROR IN TEXT AREA PRINT");
        }

        return false;
    }

    /// end here
    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        Savepoint s = new Savepoint() {
            @Override
            public int getSavepointId() throws SQLException {
                return 1;
            }

            @Override
            public String getSavepointName() throws SQLException {
                return "BILL";
            }
        };

        int row = billTable.getRowCount();
        if (row > 0) {

            try {
                conn.setAutoCommit(false);
                conn.setSavepoint(s.getSavepointName());

                // callBill declare just above 
                boolean pp = callBill();
                if (pp) {
                    if (insertIntoCsmtBill() && updateStock()) {
                        updateSaleInStockNSale();

                        DefaultTableModel tm = (DefaultTableModel) billTable.getModel();
                        tm.setRowCount(0);
                        clearTempBill();
                        setBillNo();
                        billGross.setText(String.valueOf("0.0 " + RUPEE));
                        conn.commit();
                        conn.setAutoCommit(true);
                        billPName.requestFocus();

                    } else {
                        conn.rollback(s);
                        conn.setAutoCommit(true);
                    }
                } else {
                    conn.rollback(s);
                    conn.setAutoCommit(true);
                }

            } catch (SQLException ex) {
                try {
                    conn.rollback(s);
                    conn.setAutoCommit(true);
                    JOptionPane.showMessageDialog(sf, "<html><font color=red size=4><b><i>*CANT INSERT BILL", "ERRROR!", JOptionPane.ERROR_MESSAGE);
                } catch (SQLException ex1) {
                    JOptionPane.showMessageDialog(sf, "<html><font color=red size=4><b><i>*ERROR", "ERRROR!", JOptionPane.ERROR_MESSAGE);
                }
            }

        } else {
            JOptionPane.showMessageDialog(sf, "<html><font color=red size=4><b><i>*NO ITEM IN BILL!", "ERRROR!", JOptionPane.ERROR_MESSAGE);

        }    }//GEN-LAST:event_printBtnActionPerformed

    private void billTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billTableMouseClicked

        /* if (evt.getButton() == MouseEvent.BUTTON1) {
         if (evt.getClickCount() == 1 || evt.getClickCount() == 2) {
         updatePCODE_PNAME();
         billQty.requestFocusInWindow();

         }
         }*/
    }//GEN-LAST:event_billTableMouseClicked

    private void billTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billTableKeyReleased
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
            int r = billTable.getSelectedRow();

        }
    }//GEN-LAST:event_billTableKeyReleased

    private void billQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billQtyKeyTyped
        if (!(Character.isDigit(evt.getKeyChar()))) {
            evt.consume();
        }
    }//GEN-LAST:event_billQtyKeyTyped

    private void popProdNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popProdNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_popProdNameActionPerformed

    private void popProdQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_popProdQtyKeyTyped
        if (!(Character.isDigit(evt.getKeyChar()))) {
            evt.consume();
        }
    }//GEN-LAST:event_popProdQtyKeyTyped

    private void popProdRateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_popProdRateKeyTyped
        if (!(Character.isDigit(evt.getKeyChar()) || evt.getKeyChar() == '.')) {
            evt.consume();
        }
    }//GEN-LAST:event_popProdRateKeyTyped

    private void popProdProfitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_popProdProfitKeyTyped
        if (!(Character.isDigit(evt.getKeyChar()) || evt.getKeyChar() == '.')) {
            evt.consume();
        }
    }//GEN-LAST:event_popProdProfitKeyTyped

    private void updateBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtn1ActionPerformed
        String pCode = popProdCode.getText().trim();
        String pName = popProdName.getText().trim();
        int deltaQty = 0;

        try {
            String sql = "select pStock from csmtproductinfo where pCode='" + pCode + "';";
            ps = conn.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                deltaQty = Integer.parseInt(rs.getString("pStock"));
            }
        } catch (SQLException se) {
            JOptionPane.showMessageDialog(null, "Error!\nUnable to get ptock from csmtproductinfo\n" + se);
        }

        int pStock = Integer.parseInt(popProdQty.getText().trim().isEmpty() ? "0" : popProdQty.getText().trim());
        float pRate = Float.parseFloat(popProdRate.getText().trim().isEmpty() ? "0" : popProdRate.getText().trim());
        Date pEntryD = new Date(popEntDate.getDate().getTime());
        Date pExpiryD = new Date(popExpDate.getDate().getTime());
        if (pExpiryD.before(pEntryD)) {
            JOptionPane.showMessageDialog(pop, "<html><font color =red><i><b>Invalid Expiry Date!\nExpiry Date can't be before Entry date", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {

            float pProfit = Float.parseFloat(popProdProfit.getText().trim().isEmpty() ? "0" : popProdProfit.getText().trim());

            String err = "";
            if (pName.isEmpty() || pProfit == 0 || pRate == 0 || pStock == 0 || pEntryD.toString().isEmpty() || pExpiryD.toString().isEmpty()) {
                if (pName.isEmpty()) {
                    err += "<html><font color =red><i><b>Product name is required!\n";
                }
                if (pRate == 0) {
                    err += "<html><font color =red><i><b>Product rate is required!\n";
                }
                if (pStock == 0) {
                    err += "<html><font color =red><i><b>Product stock is required!\n";
                }
                if (pEntryD.toString().isEmpty()) {
                    err += "<html><font color =red><i><b>Product Entry Date is required!\n";
                }
                if (pExpiryD.toString().isEmpty()) {
                    err += "<html><font color =red><i><b>Product Expiry Date is required!\n";
                }
                if (pProfit == 0) {
                    err += "<html><font color =red><i><b>Profit% is required!\n";
                }
                JOptionPane.showMessageDialog(pop, err, "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {

                try {

                    String sq = " update csmtproductinfo set "
                            + "pName='" + pName + "',"
                            + "pStock=" + pStock + ","
                            + "pRate=" + pRate + ","
                            + "pProfit='" + pProfit + "',"
                            + "pEntryDate='" + pEntryD + "',"
                            + "pExpiryDate='" + pExpiryD + "' "
                            + "where pCode='" + pCode + "';";
                    ps = conn.prepareStatement(sq);
                    ps.executeUpdate();

                    System.out.println(ps);

                    deltaQty = pStock - deltaQty;

                    //update pExpDateTxt on add btn click		
                    if (inMonthCB2.isSelected()) {
                        SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");
                        Calendar cd = Calendar.getInstance();
                        cd.setTime(popEntDate.getDate());
                        String mnthText = inMonthTF2.getText().toString();
                        cd.add(Calendar.MONTH, Integer.parseInt(mnthText));
                        //JDateChooser dc = new ;		
                        popExpDate.setDate(cd.getTime());
                    }
                    //		

                    //session update on update item btn click		
                    SimpleDateFormat sdf = new SimpleDateFormat("MMM/YY");
                    String sess = sdf.format(popEntDate.getDate()).toUpperCase();
                    session = (sess.substring(0, 3)) + (sess.substring(4, 6));
                    System.out.println("Ent date session:" + session + " sess:" + sess);
                    //

                    //updating salenstock table
                    int inStock = 0, addStock = 0;

                    sq = "select addstock from stocknsale where session='" + session + "' and pCode='" + pCode + "';";
                    ps = conn.prepareStatement(sq);
                    rs = ps.executeQuery();
                    if (rs.next()) {

                        String sqs = "select pStock from csmtproductinfo where pCode='" + pCode + "';";
                        ps = conn.prepareStatement(sqs);
                        ResultSet tem = null;
                        tem = ps.executeQuery();
                        if (tem.next()) {
                            inStock = Integer.parseInt(tem.getString("pStock"));
                        }

                        addStock = Integer.parseInt(rs.getString("addStock"));
                    }

                    addStock += deltaQty;
                    inStock += deltaQty;

                    sq = "update stocknsale set addStock=" + addStock + " where session='" + session + "' and pCode='" + pCode + "';";
                    ps = conn.prepareStatement(sq);
                    ps.executeUpdate();

                    //
                    setAddItem();
                    addItemTableUpdate("", "UPDATE");
                    // addItemUpdate("");
                    addBackBtn1.doClick();
                    //updateStockInStockNSale(pCode,pStock);
                } catch (SQLException ex) {
                    //System.out.println(ex);
                    JOptionPane.showMessageDialog(pop, "<html><font color =red size=4><i><b>Sorry can't update the product!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
                }

            }
        }
    }//GEN-LAST:event_updateBtn1ActionPerformed

    // update add itme table to all product by entry date
    private void addItemUpdate(String s1) {
        try {

            String sqst = "select * from csmtproductinfo where pName like '%" + s1 + "%' order by pEntryDate desc;";
            ps = conn.prepareStatement(sqst);
            rs = ps.executeQuery();
            //System.out.println("found produt like"+s1+" in csmtproductinfo");
            DefaultTableModel tm = (DefaultTableModel) stockTable.getModel();
            tm.setRowCount(0);
            SimpleDateFormat sdft = new SimpleDateFormat("dd-MMM-yyyy");

            while (rs.next()) {

                String pCode = rs.getString("pCode");
                String pName = rs.getString("pName");
                int pStock = rs.getInt("pStock");
                float pRate = rs.getFloat("pRate");
                Date pExDate = rs.getDate("pExpiryDate");
                Date pEnDate = rs.getDate("pEntryDate");
                float pProfit = rs.getFloat("pProfit");
                float cost = Float.parseFloat(String.format("%.4f", pRate + ((pProfit * pRate) / 100)));

                tm.addRow(new Object[]{
                    (String) pCode,
                    (String) pName,
                    (Integer) pStock,
                    (String) sdft.format(pEnDate),
                    (String) sdft.format(pExDate),
                    (Float) Float.parseFloat(String.format("%.2f", pRate)),
                    (Float) Float.parseFloat(String.format("%.2f", pRate * pStock)),
                    (Float) Float.parseFloat(String.format("%.0f", pProfit)),
                    (Float) cost
                    
                });

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "<html><font color=red size=4><b>Error! could not fetch", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void addBackBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBackBtn1ActionPerformed
        pop.setVisible(false);
        setAddPanelEnabled(addItem, true);
        if (inMonthCB1.isSelected()) {
            pExpDateTxt.setEnabled(false);
            inMonthTF.setEnabled(true);
        } else {
            pExpDateTxt.setEnabled(true);
            inMonthTF.setEnabled(false);
        }
        stockTable.setEnabled(true);
        updateBtn.setEnabled(false);
    }//GEN-LAST:event_addBackBtn1ActionPerformed

    private void closeBtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtn3ActionPerformed
        salesRecord.setVisible(false);
        mainMenu.setVisible(true);
    }//GEN-LAST:event_closeBtn3ActionPerformed

    private void saleRecordUpdate() {
        //sqst = "select pCode,sellStock,purRate,sellRate from stockNsale where session='"+session+"';";
        try {
            String sqst = "select pCode,sellStock,purRate,sellRate from stockNsale where session='" + session + "';";
            ps = conn.prepareStatement(sqst);
            rs = ps.executeQuery();

            DefaultTableModel tm = (DefaultTableModel) sessionSaleTab.getModel();
            tm.setRowCount(0);
            //SimpleDateFormat sdft = new SimpleDateFormat("dd-MMM-yyyy");
            int sNo = 0;
            while (rs.next()) {

                sNo++;
                String pCode = rs.getString("pCode");
                sqst = "select pName from csmtproductinfo where pCode='" + pCode + "';";
                ps = conn.prepareStatement(sqst);
                ResultSet tem = null;
                tem = ps.executeQuery();
                String pName = "";
                if (tem.next()) {
                    pName = tem.getString("pName");
                }

                //String pName = rs.getString("pName");
                int soldQty = rs.getInt("sellStock");
                float purRate = rs.getFloat("purRate");
                float purAmount = soldQty * purRate;
                float sellRate = rs.getFloat("sellRate");
                float sellAmount = soldQty * sellRate;

                tm.addRow(new Object[]{
                    (Integer) sNo,
                    (String) pCode,
                    (String) pName,
                    (Integer) soldQty,
                    (Float) Float.parseFloat(String.format("%.2f", purRate)),
                    (Float) Float.parseFloat(String.format("%.2f", purAmount)),
                    (Float) Float.parseFloat(String.format("%.2f", sellRate)),
                    (Float) Float.parseFloat(String.format("%.2f", sellAmount)),});

            }
        } catch (SQLException se) {
            JOptionPane.showMessageDialog(null, "Error! parsing data into sale record table\n" + se);
        }
    }

    private void saleRecordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleRecordBtnActionPerformed

        saleRecordUpdate();
        salesRecord.setVisible(true);
        mainMenu.setVisible(false);
        Calendar cc = Calendar.getInstance();
        SimpleDateFormat sdf1 = new SimpleDateFormat("MM");
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy");
        String mm = sdf1.format(cc.getTime());
        String yy = sdf2.format(cc.getTime());

        //  System.out.println("yy:"+yy+"  mm: "+mm);
        jComboBox2.setSelectedIndex(Integer.parseInt(mm) - 1);
        jComboBox3.setSelectedIndex(Integer.parseInt(yy) - 2015);

        //Edit tables column width--------------------------------
        sessionSaleTab.setAutoResizeMode(AUTO_RESIZE_OFF);
        sessionSaleTab.getColumnModel().getColumn(0).setPreferredWidth(50);
        sessionSaleTab.getColumnModel().getColumn(1).setPreferredWidth(80);
        sessionSaleTab.getColumnModel().getColumn(2).setPreferredWidth(300);
        sessionSaleTab.getColumnModel().getColumn(3).setPreferredWidth(80);
        sessionSaleTab.getColumnModel().getColumn(4).setMinWidth(100);
        sessionSaleTab.getColumnModel().getColumn(5).setMinWidth(130);
        sessionSaleTab.getColumnModel().getColumn(6).setMinWidth(100);
        sessionSaleTab.getColumnModel().getColumn(7).setMinWidth(130);
        sessionSaleTab.setAutoResizeMode(AUTO_RESIZE_LAST_COLUMN);
        //-------------------------------------------

        saleSessionApplyBtn.doClick();
    }//GEN-LAST:event_saleRecordBtnActionPerformed

    private void closeBtn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtn4ActionPerformed
        stockStatus.setVisible(false);
        mainMenu.setVisible(true);
    }//GEN-LAST:event_closeBtn4ActionPerformed

    private void closeBtn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtn5ActionPerformed
        billBack.doClick();
    }//GEN-LAST:event_closeBtn5ActionPerformed

    private void closeBtn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtn6ActionPerformed
        todaySale.setVisible(false);
        mainMenu.setVisible(true);
    }//GEN-LAST:event_closeBtn6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        salesRecord.setVisible(false);
        mainMenu.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        stockStatus.setVisible(false);
        mainMenu.setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void billBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billBackActionPerformed
        //setGraph();
        billCancel.setVisible(false);
        setGraph();
        mainMenu.setVisible(true);
        billNoTxt.setText("");
        returnEntireCB.setSelected(false);

        clearBillCancel();
    }//GEN-LAST:event_billBackActionPerformed

    private void billSOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billSOKActionPerformed

        if (billCancelShow()) {
            returnBillBtn.setEnabled(true);
            returnEntireCB.setEnabled(true);
        }

    }//GEN-LAST:event_billSOKActionPerformed

    private void billNoContentTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billNoContentTabMouseClicked

        int r = billNoContentTab.getSelectedRow();
        if (evt.getButton() == MouseEvent.BUTTON1) {
            billNoContentTabSelected();
            String pCode, pName, pQty, pAmt;
            pCode = String.valueOf(billNoContentTab.getValueAt(r, 1));
            pName = String.valueOf(billNoContentTab.getValueAt(r, 2));
            pQty = String.valueOf(billNoContentTab.getValueAt(r, 3));
            pAmt = String.valueOf(billNoContentTab.getValueAt(r, 5));

            billCodeTxt.setText(pCode);
            billNameTxt.setText(pName);
            billQtyTxt.setText(pQty);
            billAmtTxt.setText(pAmt);

        }
    }//GEN-LAST:event_billNoContentTabMouseClicked

    private void returnBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBillBtnActionPerformed

        boolean returnAll = returnEntireCB.isSelected();
        boolean onlySingle = billNoContentTab.getRowCount() < 2;
        if (!billCodeTxt.getText().isEmpty() || returnAll) {

            int i = JOptionPane.showConfirmDialog(sf, "Are you sure!", "RETURN", JOptionPane.YES_NO_OPTION);
            if (i == JOptionPane.YES_OPTION) {
                returnBill(returnAll || onlySingle);
            }
        } else {
            JOptionPane.showMessageDialog(sf, "<html><font color =red size=4><i><b>*Select item to return from bill table first!\n<html><font color =red size=4><i><b>Or select return entire bill", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            billNoContentTab.requestFocus();
            billNoContentTab.changeSelection(0, 1, false, false);
            billNoContentTabSelected();
        }


    }//GEN-LAST:event_returnBillBtnActionPerformed

    private void billNoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billNoTxtActionPerformed
        billSOK.doClick();
    }//GEN-LAST:event_billNoTxtActionPerformed

    private void billNoContentTabKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billNoContentTabKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
            billNoContentTabSelected();
        }
    }//GEN-LAST:event_billNoContentTabKeyReleased

    private void inMonthCB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inMonthCB1ActionPerformed
        if (inMonthCB1.isSelected() == true) {
            pExpDateTxt.setEnabled(false);
            inMonthTF.setEnabled(true);
        } else {
            pExpDateTxt.setEnabled(true);
            inMonthTF.setEnabled(false);
        }
    }//GEN-LAST:event_inMonthCB1ActionPerformed

    private void inMonthTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inMonthTFKeyReleased

        if (Character.isDigit(evt.getKeyChar())) {

            String mnthText = inMonthTF.getText().toString();
            if (mnthText.length() > 2) {
                inMonthTF.setText(mnthText.substring(0, 1));
                mnthText = inMonthTF.getText().toString();
            }

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");
            Calendar cd = Calendar.getInstance();
            cd.setTime(pEntDateTxt.getDate());

            cd.add(Calendar.MONTH, Integer.parseInt(mnthText));
            //JDateChooser dc = new ;

            pExpDateTxt.setDate(cd.getTime());
        } else {
            evt.consume();
        }

    }//GEN-LAST:event_inMonthTFKeyReleased

    private void inMonthTF2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inMonthTF2KeyReleased
        if (Character.isDigit(evt.getKeyChar())) {

            String mnthText = inMonthTF2.getText().toString();
            if (mnthText.length() > 2) {
                inMonthTF2.setText(mnthText.substring(0, 1));
                mnthText = inMonthTF2.getText().toString();
            }

            SimpleDateFormat sdf = new SimpleDateFormat("dd/mmm/yyyy");
            Calendar cd = Calendar.getInstance();
            cd.setTime(popEntDate.getDate());

            cd.add(Calendar.MONTH, Integer.parseInt(mnthText));
            //JDateChooser dc = new ;

            popExpDate.setDate(cd.getTime());
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_inMonthTF2KeyReleased

    private void inMonthCB2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inMonthCB2ActionPerformed
        if (inMonthCB2.isSelected() == true) {
            popExpDate.setEnabled(false);
            inMonthTF2.setEnabled(true);
        } else {
            popExpDate.setEnabled(true);
            inMonthTF2.setEnabled(false);
        }
    }//GEN-LAST:event_inMonthCB2ActionPerformed

    private void saleSessionApplyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleSessionApplyBtnActionPerformed
        String sesMonth = jComboBox2.getSelectedItem().toString().substring(0, 3);
        String sesYear = jComboBox3.getSelectedItem().toString().substring(2, 4);

        session = sesMonth + sesYear;
        System.out.println(session);
        saleRecordUpdate();
        Double pAmt = 0.0;
        Double sAmt = 0.0;

        DefaultTableModel tm = (DefaultTableModel) sessionSaleTab.getModel();
        int row = sessionSaleTab.getRowCount();
        int i;
        for (i = 0; i < row; i++) {
            pAmt += Double.parseDouble(tm.getValueAt(i, 5).toString());
            sAmt += Double.parseDouble(tm.getValueAt(i, 7).toString());
        }
        Double pa = new BigDecimal(pAmt).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        Double sa = new BigDecimal(sAmt).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        System.out.println("pur amt:" + pa + "  --  sale amt:" + sa);
        String a = salePAmt.getText().toString().substring(0, 16);
        salePAmt.setText(a + " " + pa);
        a = saleSAmt.getText().toString().substring(0, 15);
        saleSAmt.setText(a + " " + sa);

    }//GEN-LAST:event_saleSessionApplyBtnActionPerformed

    
    // dummy method for testing dont include
    public ArrayList<String> extractbillTableInfo2() {

        DefaultTableModel model = (DefaultTableModel) sessionSaleTab.getModel();

        int nRow = model.getRowCount(), nCol = model.getColumnCount();

        ArrayList<String> extractedInfo = new ArrayList<String>();

        String rowInfo = "";

        for (int i = 0; i < nRow; i++) {
            rowInfo = "";
            for (int j = 0; j < nCol; j++) {
                if (j == 0) {
                    rowInfo = rowInfo + String.format(" |%-4s", String.valueOf(model.getValueAt(i, j)));
                } else if (j == 1) {
                    rowInfo = rowInfo + String.format("|%-13s", String.valueOf(model.getValueAt(i, j)).length()>14?String.valueOf(model.getValueAt(i, j)).substring(0,15):String.valueOf(model.getValueAt(i, j)));
                } else if (j == 2) {
                    rowInfo = rowInfo + String.format("|%-15s", String.valueOf(model.getValueAt(i, j)).length()>14?String.valueOf(model.getValueAt(i, j)).substring(0,15):String.valueOf(model.getValueAt(i, j)));
                } else if (j == 3) {
                    rowInfo = rowInfo + String.format("|%-8s", String.valueOf(model.getValueAt(i, j)));
                } else if (j == 4) {
                    rowInfo = rowInfo + String.format("|%-8s", String.valueOf(model.getValueAt(i, j)));
                
                } else if (j == 5) {
                    rowInfo = rowInfo + String.format("|%-8s", String.valueOf(model.getValueAt(i, j)));
                
                } else if (j == 6) {
                    rowInfo = rowInfo + String.format("|%-9s", String.valueOf(model.getValueAt(i, j)));
                
                } else if (j == 7) {
                    rowInfo = rowInfo + String.format("|%-9s |", String.valueOf(model.getValueAt(i, j)));
                }
            }
            extractedInfo.add(rowInfo);
        }

        return extractedInfo;
    }

    // tan tan
    public boolean callBill2() {

        JTextArea billInfo = new JTextArea();
        ArrayList<String> TableInformation = new ArrayList<>();
        billInfo.setFont(new Font("Serif", Font.CENTER_BASELINE, 15));
        billInfo.append(String.format("%50s\n","SALES RECORD"));
        billInfo.append(String.format("%43s - %s\n",jComboBox2.getSelectedItem().toString(),jComboBox3.getSelectedItem().toString()));
        billInfo.setFont(new Font("monospaced", Font.BOLD, 10));
        billInfo.append(String.format(" %-90s\n", "------------------------------------------------------------------------------------")); //84-----
        billInfo.append(String.format(" |%-4s|%-13s|%-15s|%-8s|%-8s|%-8s|%-9s|%-9s |\n", "SNO", "PRODUCT CODE","PRODUCT NAME", "SOLD QTY", "PUR RATE", "PUR AMT.","SELL RATE","SELL AMT."));
        ArrayList<String> extractedInfo = extractbillTableInfo2();

        for (String extractedInfo1 : extractedInfo) {
            TableInformation.add(extractedInfo1);
        }

        for (String TableInformation1 : TableInformation) {
            billInfo.append(TableInformation1 + "\n");
        }
        billInfo.append(String.format(" %-90s", "------------------------------------------------------------------------------------"));
        billInfo.append(String.format("\n |     %-70s       | \n",salePAmt.getText()+"    "+saleSAmt.getText()));
        billInfo.append(String.format(" %-90s\n","------------------------------------------------------------------------------------"));
        /// billInfo.append(String.format("\n%"+billInfo.getColumns()+"s","*****************************************"));
        try {
          
            if (billInfo.print()) {
                return true;
            }

        } catch (PrinterException ex) {
            System.out.println("ERROR IN TEXT AREA PRINT");
        }

        return false;
    }

// print method above
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int row = sessionSaleTab.getRowCount();
        if (row > 0) {
            //MessageFormat header = new MessageFormat("SALE RECORD SUMMARY FOR MONTH : " + jComboBox2.getSelectedItem().toString().toUpperCase() + " YEAR : " + jComboBox3.getSelectedItem().toString().toUpperCase()
            //      + "\n " + salePAmt.getText() + "   " + saleSAmt.getText());
            //MessageFormat footer = new MessageFormat("Page - {0}");
            //  try {
            //if (sessionSaleTab.print(JTable.PrintMode.FIT_WIDTH, header, footer)) {
            if (callBill2()) {
                JOptionPane.showMessageDialog(sf, "<html><font color=blue size=4><b><i>Print Sales Summary Successful!", "SUCCESS!", JOptionPane.ERROR_MESSAGE);
            }
            //} //catch (PrinterException ex) {
            //JOptionPane.showMessageDialog(sf, "<html><font color=red size=4><b><i>*CAN'T PRINT", "ERRROR!", JOptionPane.ERROR_MESSAGE);
            //}

        } else {
            JOptionPane.showMessageDialog(sf, "<html><font color=red size=4><b><i>*NO ITEM TO PRINT!", "ERRROR!", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_jButton4ActionPerformed

    private void stockRecordApplyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockRecordApplyBtnActionPerformed
        DefaultTableModel tm = (DefaultTableModel) stockStatTab.getModel();
        tm.setRowCount(0);
        String sesMonth = monthCB.getSelectedItem().toString().substring(0, 3);
        String sesYear = yearCB.getSelectedItem().toString().substring(2, 4);

        session = sesMonth + sesYear;
        String code = stockPCode.getText().toString();
        String name = stockPName.getText().toString();
        stockRecordUpdate(code, name);
    }//GEN-LAST:event_stockRecordApplyBtnActionPerformed

    
        // dummy method for testing dont include
    public ArrayList<String> extractbillTableInfo3() {

        DefaultTableModel model = (DefaultTableModel) stockStatTab.getModel();

        int nRow = model.getRowCount(), nCol = model.getColumnCount();

        ArrayList<String> extractedInfo = new ArrayList<String>();

        String rowInfo = "";

        for (int i = 0; i < nRow; i++) {
            rowInfo = "";
            for (int j = 0; j < nCol; j++) {
                if (j == 0) {
                    rowInfo = rowInfo + String.format(" |%-4s", String.valueOf(model.getValueAt(i, j)));
                } else if (j == 1) {
                    rowInfo = rowInfo + String.format("|%-13s", String.valueOf(model.getValueAt(i, j)).length()>14?String.valueOf(model.getValueAt(i, j)).substring(0,15):String.valueOf(model.getValueAt(i, j)));
                } else if (j == 2) {
                    rowInfo = rowInfo + String.format("|%-15s", String.valueOf(model.getValueAt(i, j)).length()>14?String.valueOf(model.getValueAt(i, j)).substring(0,15):String.valueOf(model.getValueAt(i, j)));
                } else if (j == 3) {
                    rowInfo = rowInfo + String.format("|%-14s", String.valueOf(model.getValueAt(i, j)));
                } else if (j == 4) {
                    rowInfo = rowInfo + String.format("|%-10s", String.valueOf(model.getValueAt(i, j)));
                
                } else if (j == 5) {
                    rowInfo = rowInfo + String.format("|%-8s |", String.valueOf(model.getValueAt(i, j)));
                
                }
            }
            extractedInfo.add(rowInfo);
        }

        return extractedInfo;
    }

    // tan tan
    public boolean callBill3() {

        JTextArea billInfo = new JTextArea();
        ArrayList<String> TableInformation = new ArrayList<>();
        billInfo.setFont(new Font("Serif", Font.CENTER_BASELINE, 15));
        billInfo.append(String.format("%35s\n","STOCK STATUS"));
        billInfo.append(String.format("%30s - %s\n",monthCB.getSelectedItem().toString(),yearCB.getSelectedItem().toString()));
        billInfo.setFont(new Font("monospaced", Font.BOLD, 10));
        billInfo.append(String.format(" %-72s\n", "------------------------------------------------------------------------")); //74-----
        billInfo.append(String.format(" |%-4s|%-13s|%-15s|%-14s|%-10s|%-8s |\n", "SNO", "PRODUCT CODE","PRODUCT NAME", "ADDED TO STOCK", "SOLD STOCK", "PUR RATE"));
        ArrayList<String> extractedInfo = extractbillTableInfo3();

        for (String extractedInfo1 : extractedInfo) {
            TableInformation.add(extractedInfo1);
        }

        for (String TableInformation1 : TableInformation) {
            billInfo.append(TableInformation1 + "\n");
        }
        billInfo.append(String.format(" %-72s", "------------------------------------------------------------------------"));
        //billInfo.append(String.format("\n|     %-52s | \n",salePAmt.getText()+"    "+saleSAmt.getText()));
        //billInfo.append(String.format("%-72s\n","----------------------------------------------------------------"));
        /// billInfo.append(String.format("\n%"+billInfo.getColumns()+"s","*****************************************"));
        try {
          
            if (billInfo.print()) {
                return true;
            }

        } catch (PrinterException ex) {
            System.out.println("ERROR IN TEXT AREA PRINT");
        }

        return false;
    }


    
    // print method above
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int row = stockStatTab.getRowCount();
        if (row > 0) {
           // MessageFormat header = new MessageFormat("STOCK STATUS SUMMARY FOR MONTH : " + monthCB.getSelectedItem().toString().toUpperCase() + " YEAR : " + yearCB.getSelectedItem().toString().toUpperCase());
           // MessageFormat footer = new MessageFormat("Page - {0}");
           // try {
                //if (stockStatTab.print(JTable.PrintMode.FIT_WIDTH, header, footer)) {
                    if(callBill3()){
                    JOptionPane.showMessageDialog(sf, "<html><font color=blue size=4><b><i>Print Stock Summary Successful!", "SUCCESS!", JOptionPane.ERROR_MESSAGE);
                }
           // } catch (PrinterException ex) {
             //   JOptionPane.showMessageDialog(sf, "<html><font color=red size=4><b><i>*CAN'T PRINT", "ERRROR!", JOptionPane.ERROR_MESSAGE);
           // }

        } else {
            JOptionPane.showMessageDialog(sf, "<html><font color=red size=4><b><i>*NO ITEM TO PRINT!", "ERRROR!", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        setAddItem();

    }//GEN-LAST:event_jButton11ActionPerformed

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        //  setGraph();
    }//GEN-LAST:event_jLabel13MouseClicked

    private void pNameTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pNameTxtKeyReleased
        String s1 = pNameTxt.getText().trim();

        if (s1.isEmpty()) {
            s1 = "";
        }

        addItemTableUpdate(s1, "search in add");
    }//GEN-LAST:event_pNameTxtKeyReleased

     // dummy method for testing dont include
    public ArrayList<String> extractbillTableInfo4() {

        DefaultTableModel model = (DefaultTableModel) daySaleTab.getModel();

        int nRow = model.getRowCount(), nCol = model.getColumnCount();

        ArrayList<String> extractedInfo = new ArrayList<String>();

        String rowInfo = "";

        for (int i = 0; i < nRow; i++) {
            rowInfo = "";
            for (int j = 0; j < nCol; j++) {
                if (j == 0) {
                    rowInfo = rowInfo + String.format(" |%-4s", String.valueOf(model.getValueAt(i, j)));
                } else if (j == 1) {
                    rowInfo = rowInfo + String.format("|%-16s", String.valueOf(model.getValueAt(i, j)).length()>14?String.valueOf(model.getValueAt(i, j)).substring(0,15):String.valueOf(model.getValueAt(i, j)));
                } else if (j == 2) {
                    rowInfo = rowInfo + String.format("|%-9s", String.valueOf(model.getValueAt(i, j)).length()>14?String.valueOf(model.getValueAt(i, j)).substring(0,15):String.valueOf(model.getValueAt(i, j)));
                } else if (j == 3) {
                    rowInfo = rowInfo + String.format("|%-9s", String.valueOf(model.getValueAt(i, j)));
                } else if (j == 4) {
                    rowInfo = rowInfo + String.format("|%-9s", String.valueOf(model.getValueAt(i, j)));
                
                } else if (j == 5) {
                    rowInfo = rowInfo + String.format("|%-9s", String.valueOf(model.getValueAt(i, j)));
                
                } else if (j == 6) {
                    rowInfo = rowInfo + String.format("|%-9s |", String.valueOf(model.getValueAt(i, j)));
                
                }
            }
            extractedInfo.add(rowInfo);
        }

        return extractedInfo;
    }

    // tan tan
    public boolean callBill4() {

        JTextArea billInfo = new JTextArea();
        ArrayList<String> TableInformation = new ArrayList<>();
        billInfo.setFont(new Font("Serif", Font.CENTER_BASELINE, 15));
        billInfo.append(String.format("%50s\n","SALE RECORD : "+LocalDate.now()));
        billInfo.append(String.format(" %-50s\n"," Total Sale Cost: "+tSaleCost.getText()+" | Total Sale Amount: "+tSaleAmt.getText() + " | Total Profit: "+tProfit.getText()));
        billInfo.setFont(new Font("monospaced", Font.BOLD, 10));
        billInfo.append(String.format(" %-80s\n", "--------------------------------------------------------------------------")); //74-----
        billInfo.append(String.format(" |%-4s|%-16s|%-9s|%-9s|%-9s|%-9s|%-9s |\n", "SNO","PRODUCT NAME", "IN STOCK", "QTY.","SELL RATE","AMOUNT","PROFIT"));
        ArrayList<String> extractedInfo = extractbillTableInfo4();

        for (String extractedInfo1 : extractedInfo) {
            TableInformation.add(extractedInfo1);
        }

        for (String TableInformation1 : TableInformation) {
            billInfo.append(TableInformation1 + "\n");
        }
        billInfo.append(String.format(" %-80s", "--------------------------------------------------------------------------"));
       // billInfo.append(String.format("\n|     %-70s | \n",salePAmt.getText()+"    "+saleSAmt.getText()));
       // billInfo.append(String.format("%-90s\n","--------------------------------------------------------------------------"));
        /// billInfo.append(String.format("\n%"+billInfo.getColumns()+"s","*****************************************"));
        try {
          
            if (billInfo.print()) {
                return true;
            }

        } catch (PrinterException ex) {
            System.out.println("ERROR IN TEXT AREA PRINT");
        }

        return false;
    }


    
    
    // print method above
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       int row = daySaleTab.getRowCount();
       
        if (row > 0) {
            /*StringBuilder br = new StringBuilder("TODAY's SALE DATED " +LocalDate.now()+ "\nTotal Sale Cost : " + tSaleCost.getText()
                    + "   Total Sale Amount : " + tSaleAmt.getText() + "\nNo of diff. Items : " + noOfItem.getText()
                    + "   Total Profit : " + tProfit.getText());
            MessageFormat header = new MessageFormat(br.toString());*/
          //  StringBuilder br=new StringBuilder("DAY SALE DATED:"+LocalDate.now());
           // MessageFormat header = new MessageFormat(br.toString());
           // br=new StringBuilder("Total Sale Cost: "+tSaleCost.getText()+"  Total Sale Amount: "+tSaleAmt.getText() + "  Total Profit: "+tProfit.getText());
           // MessageFormat footer = new MessageFormat(br.toString());
           // try {
            //    if (daySaleTab.print(JTable.PrintMode.FIT_WIDTH, header, footer)) {
            if(callBill4()){ 
            JOptionPane.showMessageDialog(sf, "<html><font color=blue size=4><b><i>Print Summary Successful!", "SUCCESS!", JOptionPane.ERROR_MESSAGE);
                }

           // } catch (PrinterException ex) {
           //     JOptionPane.showMessageDialog(sf, "<html><font color=red size=4><b><i>*CAN'T PRINT", "ERRROR!", JOptionPane.ERROR_MESSAGE);
           // }

        } else {
            JOptionPane.showMessageDialog(sf, "<html><font color=red size=4><b><i>*NO ITEM TO PRINT!", "ERRROR!", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        todaySale.setVisible(false);
        mainMenu.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    @Override
    public void actionPerformed(ActionEvent e) {
        Calendar c2 = Calendar.getInstance();
        SimpleDateFormat sdft = new SimpleDateFormat("dd-MMM-yyyy hh:mm:ss");
        SimpleDateFormat sdft2 = new SimpleDateFormat("dd/M/yy hh:mm");
        if (e.getSource() == tm2) {
            java.util.Date d1 = c2.getTime();
            dateNTime.setText(sdft.format(d1));
            dateNTime1.setText(sdft.format(d1));
            dateNTime2.setText(sdft.format(d1));
            dateNTime3.setText(sdft.format(d1));
            dateNTime4.setText(sdft.format(d1));
            dateNTime5.setText(sdft.format(d1));
            dateNTime6.setText(sdft.format(d1));
            billDateTime.setText(sdft2.format(d1));
        }

    }

    void setGraph() {

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        int prof = 0;
        Calendar c2 = Calendar.getInstance();
        java.util.Date d1 = c2.getTime();
        d1.setMonth(d1.getMonth() - 3);
        for (int i = 0; i < 3; i++) {
            d1.setMonth(d1.getMonth() + 1);
            SimpleDateFormat sdf = new SimpleDateFormat("MMM/YY");
            String sdate = sdf.format(d1).toUpperCase();
            session = sdate.substring(0, 3) + sdate.substring(4, 6);

            System.out.println(i + "Session:" + session);
            try {
                String ss = "select sellStock,purRate,sellRate from stocknsale where session='" + session + "';";
                rs = ps.executeQuery(ss);
                int pro = 0;
                while (rs.next()) {
                    int stk = rs.getInt("sellStock");
                    float pr = rs.getFloat("purRate");
                    float sr = rs.getFloat("sellRate");
                    pro += ((sr - pr) * stk);
                }

                dataset.setValue(new Float(pro), "PROFIT", session);

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error");
            }

        }

        JFreeChart chart = ChartFactory.createBarChart3D("SALE PROFIT", "MONTHLY", "IN RUPEE", dataset, PlotOrientation.VERTICAL, false, true, false);
        Color chartBg = new Color(240, 240, 240);
        chart.setBackgroundPaint(chartBg);
        //chart.setBackgroundPaint(Color.RGBtoHSB(240, 240,240, ));
        chart.getTitle().setPaint(Color.RED);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartPanel frame = new ChartPanel(chart);
        mainMenuGUI.removeAll();

        mainMenuGUI.add(frame);
        mainMenuGUI.revalidate();
        mainMenuGUI.repaint();
        pack();
        setExtendedState(Frame.MAXIMIZED_BOTH);

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                sf = new MainMenu();

                sf.setAlwaysOnTop(true);
                sf.setVisible(true);
                sf.addItemBtn.requestFocusInWindow();

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBackBtn;
    private javax.swing.JButton addBackBtn1;
    private javax.swing.JButton addBillBtn;
    private javax.swing.JButton addBtn;
    private javax.swing.JPanel addItem;
    private javax.swing.JButton addItemBtn;
    private javax.swing.JTextField billAmtTxt;
    private javax.swing.JButton billBack;
    private javax.swing.JButton billBackBtn;
    private javax.swing.JPanel billCancel;
    private javax.swing.JButton billCancelBtn;
    private javax.swing.JTextField billCodeTxt;
    private javax.swing.JLabel billDTxt;
    private javax.swing.JLabel billDateTime;
    private javax.swing.JLabel billGTxt;
    private javax.swing.JLabel billGross;
    private javax.swing.JTextField billNTxt;
    private javax.swing.JTextField billNameTxt;
    private javax.swing.JLabel billNo;
    private javax.swing.JTable billNoContentTab;
    private javax.swing.JTextField billNoTxt;
    private javax.swing.JTextField billPCode;
    private javax.swing.JTextField billPName;
    private javax.swing.JPanel billPrintPanel;
    private javax.swing.JTextField billQty;
    private javax.swing.JTextField billQtyTxt;
    private javax.swing.JButton billSOK;
    private javax.swing.JTable billTable;
    private javax.swing.JPanel billing;
    private javax.swing.JButton billingBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton closeBtn1;
    private javax.swing.JButton closeBtn2;
    private javax.swing.JButton closeBtn3;
    private javax.swing.JButton closeBtn4;
    private javax.swing.JButton closeBtn5;
    private javax.swing.JButton closeBtn6;
    private javax.swing.JTextField cname;
    private javax.swing.JLabel contactLabel;
    private javax.swing.JTextField cunit;
    private javax.swing.JLabel dateNTime;
    private javax.swing.JLabel dateNTime1;
    private javax.swing.JLabel dateNTime2;
    private javax.swing.JLabel dateNTime3;
    private javax.swing.JLabel dateNTime4;
    private javax.swing.JLabel dateNTime5;
    private javax.swing.JLabel dateNTime6;
    private javax.swing.JTable daySaleTab;
    private javax.swing.JButton exitApplicationBtn;
    private javax.swing.JButton grossProfitBtn;
    private javax.swing.JCheckBox inMonthCB1;
    private javax.swing.JCheckBox inMonthCB2;
    private javax.swing.JTextField inMonthTF;
    private javax.swing.JTextField inMonthTF2;
    private javax.swing.JTable inStockTab;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel mainMenu;
    private javax.swing.JPanel mainMenuGUI;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JComboBox monthCB;
    private javax.swing.JTextField noOfItem;
    private com.toedter.calendar.JDateChooser pEntDateTxt;
    private com.toedter.calendar.JDateChooser pExpDateTxt;
    private javax.swing.JTextField pNameTxt;
    private javax.swing.JTextField pProTxt;
    private javax.swing.JTextField pQtyTxt;
    private javax.swing.JTextField pRateTxt;
    private javax.swing.JDialog pop;
    private com.toedter.calendar.JDateChooser popEntDate;
    private com.toedter.calendar.JDateChooser popExpDate;
    private javax.swing.JTextField popProdCode;
    private javax.swing.JTextField popProdName;
    private javax.swing.JTextField popProdProfit;
    private javax.swing.JTextField popProdQty;
    private javax.swing.JTextField popProdRate;
    private javax.swing.JButton printBtn;
    private javax.swing.JButton returnBillBtn;
    private javax.swing.JCheckBox returnEntireCB;
    private javax.swing.JLabel salePAmt;
    private javax.swing.JButton saleRecordBtn;
    private javax.swing.JPanel saleRecordPanel;
    private javax.swing.JLabel saleSAmt;
    private javax.swing.JButton saleSessionApplyBtn;
    private javax.swing.JPanel salesRecord;
    private javax.swing.JTable sessionSaleTab;
    private javax.swing.JTextField stockPCode;
    private javax.swing.JTextField stockPName;
    private javax.swing.JButton stockRecordApplyBtn;
    private javax.swing.JPanel stockStatPanel;
    private javax.swing.JTable stockStatTab;
    private javax.swing.JPanel stockStatus;
    private javax.swing.JButton stockStatusBtn;
    private javax.swing.JTable stockTable;
    private javax.swing.JTextField tProfit;
    private javax.swing.JTextField tSaleAmt;
    private javax.swing.JTextField tSaleCost;
    private javax.swing.JPanel todaySale;
    private javax.swing.JButton updateBtn;
    private javax.swing.JButton updateBtn1;
    private javax.swing.JPanel updatePopup;
    private javax.swing.JComboBox yearCB;
    // End of variables declaration//GEN-END:variables
}
